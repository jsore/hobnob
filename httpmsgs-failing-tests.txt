yarn run test:e2e
yarn run v1.16.0
$ dotenv -e envs/test.env -e envs/.env ./scripts/e2e.test.sh
Elasticsearch running and ready for tests
$ yarn run build && dotenv -e envs/.env node dist/index.js
$ rimraf dist && babel src -d dist --copy-files
Successfully compiled 11 files with Babel.
Hobnob API server running on port 8888...
node    77503 justin   23u  IPv6 0x19373463a31da5a3      0t0  TCP *:8888 (LISTEN)
















...| superagent(method, http://host:portpath) ->POST, http://localhost:8888/users/ || ES client.host -> http://localhost:9200 |
...Response {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  res:
   IncomingMessage {
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: true,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: true,
        decoder: [StringDecoder],
        encoding: 'utf8' },
     readable: false,
     _events:
      [Object: null prototype] {
        end: [Array],
        data: [Array],
        error: [Array],
        close: [Function: bound emit] },
     _eventsCount: 4,
     _maxListeners: undefined,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 383,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 226 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 383,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 226 },
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     httpVersion: '1.1',
     complete: true,
     headers:
      { 'x-powered-by': 'Express',
        'content-security-policy': 'default-src \'none\'',
        'x-content-type-options': 'nosniff',
        'content-type': 'text/html; charset=utf-8',
        'content-length': '146',
        date: 'Fri, 21 Jun 2019 21:53:21 GMT',
        connection: 'close' },
     rawHeaders:
      [ 'X-Powered-By',
        'Express',
        'Content-Security-Policy',
        'default-src \'none\'',
        'X-Content-Type-Options',
        'nosniff',
        'Content-Type',
        'text/html; charset=utf-8',
        'Content-Length',
        '146',
        'Date',
        'Fri, 21 Jun 2019 21:53:21 GMT',
        'Connection',
        'close' ],
     trailers: {},
     rawTrailers: [],
     aborted: false,
     upgrade: false,
     url: '',
     method: null,
     statusCode: 404,
     statusMessage: 'Not Found',
     client:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 383,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 226 },
     _consuming: false,
     _dumped: false,
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 41,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 41\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [Circular],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     text:
      '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
  request:
   Request {
     _events: [Object: null prototype] { abort: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     _enableHttp2: false,
     _agent: false,
     _formData: null,
     method: 'POST',
     url: 'http://localhost:8888/users/',
     _header:
      { 'user-agent': 'node-superagent/5.0.5',
        'content-type': 'application/json' },
     header:
      { 'User-Agent': 'node-superagent/5.0.5',
        'Content-Type': 'application/json' },
     writable: true,
     _redirects: 0,
     _maxRedirects: 5,
     cookies: '',
     qs: {},
     _query: [],
     qsRaw: [],
     _redirectList: [],
     _streamRequest: false,
     _data: '{"email":"e@ma.il","password":"password"}',
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 41,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 41\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [IncomingMessage],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     protocol: 'http:',
     host: 'localhost:8888',
     _endCalled: true,
     _callback: [Function],
     _fullfilledPromise: Promise { <rejected> [Error] },
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [ClientRequest],
        text:
         '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
     _resBuffered: true,
     response: [Circular],
     called: true },
  req:
   ClientRequest {
     _events:
      [Object: null prototype] {
        drain: [Function],
        error: [Function],
        prefinish: [Function: requestOnPrefinish] },
     _eventsCount: 3,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: true,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: false,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: 41,
     _hasBody: true,
     _trailer: '',
     finished: true,
     _headerSent: true,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 383,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 226 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 383,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 226 },
     _header:
      'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 41\r\nConnection: close\r\n\r\n',
     _onPendingData: [Function: noopPendingOutput],
     agent:
      Agent {
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object],
        requests: {},
        sockets: {},
        freeSockets: {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256 },
     socketPath: undefined,
     timeout: undefined,
     method: 'POST',
     path: '/users/',
     _ended: true,
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [Circular],
        text:
         '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
     aborted: undefined,
     timeoutCb: null,
     upgradeOrConnect: false,
     parser: null,
     maxHeadersCount: null,
     [Symbol(isCorked)]: false,
     [Symbol(outHeadersKey)]:
      [Object: null prototype] {
        host: [Array],
        'accept-encoding': [Array],
        'user-agent': [Array],
        'content-type': [Array],
        'content-length': [Array] } },
  text:
   '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n',
  body: {},
  files: undefined,
  buffered: true,
  headers:
   { 'x-powered-by': 'Express',
     'content-security-policy': 'default-src \'none\'',
     'x-content-type-options': 'nosniff',
     'content-type': 'text/html; charset=utf-8',
     'content-length': '146',
     date: 'Fri, 21 Jun 2019 21:53:21 GMT',
     connection: 'close' },
  header:
   { 'x-powered-by': 'Express',
     'content-security-policy': 'default-src \'none\'',
     'x-content-type-options': 'nosniff',
     'content-type': 'text/html; charset=utf-8',
     'content-length': '146',
     date: 'Fri, 21 Jun 2019 21:53:21 GMT',
     connection: 'close' },
  statusCode: 404,
  status: 404,
  statusType: 4,
  info: false,
  ok: false,
  redirect: false,
  clientError: true,
  serverError: false,
  error:
   { Error: cannot POST /users/ (404)
       at Response.toError (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:98:13)
       at ResponseBase._setStatusProperties (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/response-base.js:119:48)
       at new Response (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:44:8)
       at Request._emitResponse (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:909:18)
       at IncomingMessage.<anonymous> (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:1105:42)
       at IncomingMessage.emit (events.js:194:15)
       at endReadableNT (_stream_readable.js:1125:12)
       at process._tickCallback (internal/process/next_tick.js:63:19)
     status: 404,
     text:
      '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n',
     method: 'POST',
     path: '/users/' },
  created: false,
  accepted: false,
  noContent: false,
  badRequest: false,
  unauthorized: false,
  notAcceptable: false,
  forbidden: false,
  notFound: true,
  unprocessableEntity: false,
  type: 'text/html',
  charset: 'utf-8',
  links: {},
  setEncoding: [Function: bound ],
  redirects: [],
  pipe: [Function] }
404








F--| superagent(method, http://host:portpath) ->POST, http://localhost:8888/users/ || ES client.host -> http://localhost:9200 |
...Response {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  res:
   IncomingMessage {
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: true,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: true,
        decoder: [StringDecoder],
        encoding: 'utf8' },
     readable: false,
     _events:
      [Object: null prototype] {
        end: [Array],
        data: [Array],
        error: [Array],
        close: [Function: bound emit] },
     _eventsCount: 4,
     _maxListeners: undefined,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 427,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 226 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 427,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 226 },
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     httpVersion: '1.1',
     complete: true,
     headers:
      { 'x-powered-by': 'Express',
        'content-security-policy': 'default-src \'none\'',
        'x-content-type-options': 'nosniff',
        'content-type': 'text/html; charset=utf-8',
        'content-length': '146',
        date: 'Fri, 21 Jun 2019 21:53:21 GMT',
        connection: 'close' },
     rawHeaders:
      [ 'X-Powered-By',
        'Express',
        'Content-Security-Policy',
        'default-src \'none\'',
        'X-Content-Type-Options',
        'nosniff',
        'Content-Type',
        'text/html; charset=utf-8',
        'Content-Length',
        '146',
        'Date',
        'Fri, 21 Jun 2019 21:53:21 GMT',
        'Connection',
        'close' ],
     trailers: {},
     rawTrailers: [],
     aborted: false,
     upgrade: false,
     url: '',
     method: null,
     statusCode: 404,
     statusMessage: 'Not Found',
     client:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 427,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 226 },
     _consuming: false,
     _dumped: false,
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 41,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 41\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [Circular],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     text:
      '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
  request:
   Request {
     _events: [Object: null prototype] { abort: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     _enableHttp2: false,
     _agent: false,
     _formData: null,
     method: 'POST',
     url: 'http://localhost:8888/users/',
     _header:
      { 'user-agent': 'node-superagent/5.0.5',
        'content-type': 'application/json' },
     header:
      { 'User-Agent': 'node-superagent/5.0.5',
        'Content-Type': 'application/json' },
     writable: true,
     _redirects: 0,
     _maxRedirects: 5,
     cookies: '',
     qs: {},
     _query: [],
     qsRaw: [],
     _redirectList: [],
     _streamRequest: false,
     _data: '{"email":"e@ma.il","password":"password"}',
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 41,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 41\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [IncomingMessage],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     protocol: 'http:',
     host: 'localhost:8888',
     _endCalled: true,
     _callback: [Function],
     _fullfilledPromise: Promise { <rejected> [Error] },
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [ClientRequest],
        text:
         '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
     _resBuffered: true,
     response: [Circular],
     called: true },
  req:
   ClientRequest {
     _events:
      [Object: null prototype] {
        drain: [Function],
        error: [Function],
        prefinish: [Function: requestOnPrefinish] },
     _eventsCount: 3,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: true,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: false,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: 41,
     _hasBody: true,
     _trailer: '',
     finished: true,
     _headerSent: true,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 427,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 226 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 427,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 226 },
     _header:
      'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 41\r\nConnection: close\r\n\r\n',
     _onPendingData: [Function: noopPendingOutput],
     agent:
      Agent {
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object],
        requests: {},
        sockets: {},
        freeSockets: {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256 },
     socketPath: undefined,
     timeout: undefined,
     method: 'POST',
     path: '/users/',
     _ended: true,
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [Circular],
        text:
         '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
     aborted: undefined,
     timeoutCb: null,
     upgradeOrConnect: false,
     parser: null,
     maxHeadersCount: null,
     [Symbol(isCorked)]: false,
     [Symbol(outHeadersKey)]:
      [Object: null prototype] {
        host: [Array],
        'accept-encoding': [Array],
        'user-agent': [Array],
        'content-type': [Array],
        'content-length': [Array] } },
  text:
   '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n',
  body: {},
  files: undefined,
  buffered: true,
  headers:
   { 'x-powered-by': 'Express',
     'content-security-policy': 'default-src \'none\'',
     'x-content-type-options': 'nosniff',
     'content-type': 'text/html; charset=utf-8',
     'content-length': '146',
     date: 'Fri, 21 Jun 2019 21:53:21 GMT',
     connection: 'close' },
  header:
   { 'x-powered-by': 'Express',
     'content-security-policy': 'default-src \'none\'',
     'x-content-type-options': 'nosniff',
     'content-type': 'text/html; charset=utf-8',
     'content-length': '146',
     date: 'Fri, 21 Jun 2019 21:53:21 GMT',
     connection: 'close' },
  statusCode: 404,
  status: 404,
  statusType: 4,
  info: false,
  ok: false,
  redirect: false,
  clientError: true,
  serverError: false,
  error:
   { Error: cannot POST /users/ (404)
       at Response.toError (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:98:13)
       at ResponseBase._setStatusProperties (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/response-base.js:119:48)
       at new Response (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:44:8)
       at Request._emitResponse (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:909:18)
       at IncomingMessage.<anonymous> (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:1105:42)
       at IncomingMessage.emit (events.js:194:15)
       at endReadableNT (_stream_readable.js:1125:12)
       at process._tickCallback (internal/process/next_tick.js:63:19)
     status: 404,
     text:
      '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n',
     method: 'POST',
     path: '/users/' },
  created: false,
  accepted: false,
  noContent: false,
  badRequest: false,
  unauthorized: false,
  notAcceptable: false,
  forbidden: false,
  notFound: true,
  unprocessableEntity: false,
  type: 'text/html',
  charset: 'utf-8',
  links: {},
  setEncoding: [Function: bound ],
  redirects: [],
  pipe: [Function] }
404










F--| superagent(method, http://host:portpath) ->POST, http://localhost:8888/users/ || ES client.host -> http://localhost:9200 |
...Response {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  res:
   IncomingMessage {
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: true,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: true,
        decoder: [StringDecoder],
        encoding: 'utf8' },
     readable: false,
     _events:
      [Object: null prototype] {
        end: [Array],
        data: [Array],
        error: [Array],
        close: [Function: bound emit] },
     _eventsCount: 4,
     _maxListeners: undefined,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 471,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 219 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 471,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 219 },
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     httpVersion: '1.1',
     complete: true,
     headers:
      { 'x-powered-by': 'Express',
        'content-security-policy': 'default-src \'none\'',
        'x-content-type-options': 'nosniff',
        'content-type': 'text/html; charset=utf-8',
        'content-length': '146',
        date: 'Fri, 21 Jun 2019 21:53:21 GMT',
        connection: 'close' },
     rawHeaders:
      [ 'X-Powered-By',
        'Express',
        'Content-Security-Policy',
        'default-src \'none\'',
        'X-Content-Type-Options',
        'nosniff',
        'Content-Type',
        'text/html; charset=utf-8',
        'Content-Length',
        '146',
        'Date',
        'Fri, 21 Jun 2019 21:53:21 GMT',
        'Connection',
        'close' ],
     trailers: {},
     rawTrailers: [],
     aborted: false,
     upgrade: false,
     url: '',
     method: null,
     statusCode: 404,
     statusMessage: 'Not Found',
     client:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 471,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 219 },
     _consuming: false,
     _dumped: false,
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 34,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 34\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [Circular],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     text:
      '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
  request:
   Request {
     _events: [Object: null prototype] { abort: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     _enableHttp2: false,
     _agent: false,
     _formData: null,
     method: 'POST',
     url: 'http://localhost:8888/users/',
     _header:
      { 'user-agent': 'node-superagent/5.0.5',
        'content-type': 'application/json' },
     header:
      { 'User-Agent': 'node-superagent/5.0.5',
        'Content-Type': 'application/json' },
     writable: true,
     _redirects: 0,
     _maxRedirects: 5,
     cookies: '',
     qs: {},
     _query: [],
     qsRaw: [],
     _redirectList: [],
     _streamRequest: false,
     _data: '{"email":10,"password":"password"}',
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 34,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 34\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [IncomingMessage],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     protocol: 'http:',
     host: 'localhost:8888',
     _endCalled: true,
     _callback: [Function],
     _fullfilledPromise: Promise { <rejected> [Error] },
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [ClientRequest],
        text:
         '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
     _resBuffered: true,
     response: [Circular],
     called: true },
  req:
   ClientRequest {
     _events:
      [Object: null prototype] {
        drain: [Function],
        error: [Function],
        prefinish: [Function: requestOnPrefinish] },
     _eventsCount: 3,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: true,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: false,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: 34,
     _hasBody: true,
     _trailer: '',
     finished: true,
     _headerSent: true,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 471,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 219 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 471,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 219 },
     _header:
      'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 34\r\nConnection: close\r\n\r\n',
     _onPendingData: [Function: noopPendingOutput],
     agent:
      Agent {
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object],
        requests: {},
        sockets: {},
        freeSockets: {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256 },
     socketPath: undefined,
     timeout: undefined,
     method: 'POST',
     path: '/users/',
     _ended: true,
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [Circular],
        text:
         '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
     aborted: undefined,
     timeoutCb: null,
     upgradeOrConnect: false,
     parser: null,
     maxHeadersCount: null,
     [Symbol(isCorked)]: false,
     [Symbol(outHeadersKey)]:
      [Object: null prototype] {
        host: [Array],
        'accept-encoding': [Array],
        'user-agent': [Array],
        'content-type': [Array],
        'content-length': [Array] } },
  text:
   '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n',
  body: {},
  files: undefined,
  buffered: true,
  headers:
   { 'x-powered-by': 'Express',
     'content-security-policy': 'default-src \'none\'',
     'x-content-type-options': 'nosniff',
     'content-type': 'text/html; charset=utf-8',
     'content-length': '146',
     date: 'Fri, 21 Jun 2019 21:53:21 GMT',
     connection: 'close' },
  header:
   { 'x-powered-by': 'Express',
     'content-security-policy': 'default-src \'none\'',
     'x-content-type-options': 'nosniff',
     'content-type': 'text/html; charset=utf-8',
     'content-length': '146',
     date: 'Fri, 21 Jun 2019 21:53:21 GMT',
     connection: 'close' },
  statusCode: 404,
  status: 404,
  statusType: 4,
  info: false,
  ok: false,
  redirect: false,
  clientError: true,
  serverError: false,
  error:
   { Error: cannot POST /users/ (404)
       at Response.toError (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:98:13)
       at ResponseBase._setStatusProperties (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/response-base.js:119:48)
       at new Response (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:44:8)
       at Request._emitResponse (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:909:18)
       at IncomingMessage.<anonymous> (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:1105:42)
       at IncomingMessage.emit (events.js:194:15)
       at endReadableNT (_stream_readable.js:1125:12)
       at process._tickCallback (internal/process/next_tick.js:63:19)
     status: 404,
     text:
      '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n',
     method: 'POST',
     path: '/users/' },
  created: false,
  accepted: false,
  noContent: false,
  badRequest: false,
  unauthorized: false,
  notAcceptable: false,
  forbidden: false,
  notFound: true,
  unprocessableEntity: false,
  type: 'text/html',
  charset: 'utf-8',
  links: {},
  setEncoding: [Function: bound ],
  redirects: [],
  pipe: [Function] }
404








F--| superagent(method, http://host:portpath) ->POST, http://localhost:8888/users/ || ES client.host -> http://localhost:9200 |
...Response {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  res:
   IncomingMessage {
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: true,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: true,
        decoder: [StringDecoder],
        encoding: 'utf8' },
     readable: false,
     _events:
      [Object: null prototype] {
        end: [Array],
        data: [Array],
        error: [Array],
        close: [Function: bound emit] },
     _eventsCount: 4,
     _maxListeners: undefined,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 515,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 218 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 515,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 218 },
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     httpVersion: '1.1',
     complete: true,
     headers:
      { 'x-powered-by': 'Express',
        'content-security-policy': 'default-src \'none\'',
        'x-content-type-options': 'nosniff',
        'content-type': 'text/html; charset=utf-8',
        'content-length': '146',
        date: 'Fri, 21 Jun 2019 21:53:21 GMT',
        connection: 'close' },
     rawHeaders:
      [ 'X-Powered-By',
        'Express',
        'Content-Security-Policy',
        'default-src \'none\'',
        'X-Content-Type-Options',
        'nosniff',
        'Content-Type',
        'text/html; charset=utf-8',
        'Content-Length',
        '146',
        'Date',
        'Fri, 21 Jun 2019 21:53:21 GMT',
        'Connection',
        'close' ],
     trailers: {},
     rawTrailers: [],
     aborted: false,
     upgrade: false,
     url: '',
     method: null,
     statusCode: 404,
     statusMessage: 'Not Found',
     client:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 515,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 218 },
     _consuming: false,
     _dumped: false,
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 33,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 33\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [Circular],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     text:
      '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
  request:
   Request {
     _events: [Object: null prototype] { abort: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     _enableHttp2: false,
     _agent: false,
     _formData: null,
     method: 'POST',
     url: 'http://localhost:8888/users/',
     _header:
      { 'user-agent': 'node-superagent/5.0.5',
        'content-type': 'application/json' },
     header:
      { 'User-Agent': 'node-superagent/5.0.5',
        'Content-Type': 'application/json' },
     writable: true,
     _redirects: 0,
     _maxRedirects: 5,
     cookies: '',
     qs: {},
     _query: [],
     qsRaw: [],
     _redirectList: [],
     _streamRequest: false,
     _data: '{"email":"e@ma.il","password":10}',
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 33,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 33\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [IncomingMessage],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     protocol: 'http:',
     host: 'localhost:8888',
     _endCalled: true,
     _callback: [Function],
     _fullfilledPromise: Promise { <rejected> [Error] },
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [ClientRequest],
        text:
         '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
     _resBuffered: true,
     response: [Circular],
     called: true },
  req:
   ClientRequest {
     _events:
      [Object: null prototype] {
        drain: [Function],
        error: [Function],
        prefinish: [Function: requestOnPrefinish] },
     _eventsCount: 3,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: true,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: false,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: 33,
     _hasBody: true,
     _trailer: '',
     finished: true,
     _headerSent: true,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 515,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 218 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 515,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 218 },
     _header:
      'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 33\r\nConnection: close\r\n\r\n',
     _onPendingData: [Function: noopPendingOutput],
     agent:
      Agent {
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object],
        requests: {},
        sockets: {},
        freeSockets: {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256 },
     socketPath: undefined,
     timeout: undefined,
     method: 'POST',
     path: '/users/',
     _ended: true,
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [Circular],
        text:
         '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
     aborted: undefined,
     timeoutCb: null,
     upgradeOrConnect: false,
     parser: null,
     maxHeadersCount: null,
     [Symbol(isCorked)]: false,
     [Symbol(outHeadersKey)]:
      [Object: null prototype] {
        host: [Array],
        'accept-encoding': [Array],
        'user-agent': [Array],
        'content-type': [Array],
        'content-length': [Array] } },
  text:
   '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n',
  body: {},
  files: undefined,
  buffered: true,
  headers:
   { 'x-powered-by': 'Express',
     'content-security-policy': 'default-src \'none\'',
     'x-content-type-options': 'nosniff',
     'content-type': 'text/html; charset=utf-8',
     'content-length': '146',
     date: 'Fri, 21 Jun 2019 21:53:21 GMT',
     connection: 'close' },
  header:
   { 'x-powered-by': 'Express',
     'content-security-policy': 'default-src \'none\'',
     'x-content-type-options': 'nosniff',
     'content-type': 'text/html; charset=utf-8',
     'content-length': '146',
     date: 'Fri, 21 Jun 2019 21:53:21 GMT',
     connection: 'close' },
  statusCode: 404,
  status: 404,
  statusType: 4,
  info: false,
  ok: false,
  redirect: false,
  clientError: true,
  serverError: false,
  error:
   { Error: cannot POST /users/ (404)
       at Response.toError (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:98:13)
       at ResponseBase._setStatusProperties (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/response-base.js:119:48)
       at new Response (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:44:8)
       at Request._emitResponse (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:909:18)
       at IncomingMessage.<anonymous> (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:1105:42)
       at IncomingMessage.emit (events.js:194:15)
       at endReadableNT (_stream_readable.js:1125:12)
       at process._tickCallback (internal/process/next_tick.js:63:19)
     status: 404,
     text:
      '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n',
     method: 'POST',
     path: '/users/' },
  created: false,
  accepted: false,
  noContent: false,
  badRequest: false,
  unauthorized: false,
  notAcceptable: false,
  forbidden: false,
  notFound: true,
  unprocessableEntity: false,
  type: 'text/html',
  charset: 'utf-8',
  links: {},
  setEncoding: [Function: bound ],
  redirects: [],
  pipe: [Function] }
404








F--| superagent(method, http://host:portpath) ->POST, http://localhost:8888/users/ || ES client.host -> http://localhost:9200 |
...Response {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  res:
   IncomingMessage {
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: true,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: true,
        decoder: [StringDecoder],
        encoding: 'utf8' },
     readable: false,
     _events:
      [Object: null prototype] {
        end: [Array],
        data: [Array],
        error: [Array],
        close: [Function: bound emit] },
     _eventsCount: 4,
     _maxListeners: undefined,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 559,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 228 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 559,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 228 },
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     httpVersion: '1.1',
     complete: true,
     headers:
      { 'x-powered-by': 'Express',
        'content-security-policy': 'default-src \'none\'',
        'x-content-type-options': 'nosniff',
        'content-type': 'text/html; charset=utf-8',
        'content-length': '146',
        date: 'Fri, 21 Jun 2019 21:53:22 GMT',
        connection: 'close' },
     rawHeaders:
      [ 'X-Powered-By',
        'Express',
        'Content-Security-Policy',
        'default-src \'none\'',
        'X-Content-Type-Options',
        'nosniff',
        'Content-Type',
        'text/html; charset=utf-8',
        'Content-Length',
        '146',
        'Date',
        'Fri, 21 Jun 2019 21:53:22 GMT',
        'Connection',
        'close' ],
     trailers: {},
     rawTrailers: [],
     aborted: false,
     upgrade: false,
     url: '',
     method: null,
     statusCode: 404,
     statusMessage: 'Not Found',
     client:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 559,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 228 },
     _consuming: false,
     _dumped: false,
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 43,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 43\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [Circular],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     text:
      '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
  request:
   Request {
     _events: [Object: null prototype] { abort: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     _enableHttp2: false,
     _agent: false,
     _formData: null,
     method: 'POST',
     url: 'http://localhost:8888/users/',
     _header:
      { 'user-agent': 'node-superagent/5.0.5',
        'content-type': 'application/json' },
     header:
      { 'User-Agent': 'node-superagent/5.0.5',
        'Content-Type': 'application/json' },
     writable: true,
     _redirects: 0,
     _maxRedirects: 5,
     cookies: '',
     qs: {},
     _query: [],
     qsRaw: [],
     _redirectList: [],
     _streamRequest: false,
     _data: '{"email":"a238juqy2","password":"password"}',
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 43,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 43\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [IncomingMessage],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     protocol: 'http:',
     host: 'localhost:8888',
     _endCalled: true,
     _callback: [Function],
     _fullfilledPromise: Promise { <rejected> [Error] },
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [ClientRequest],
        text:
         '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
     _resBuffered: true,
     response: [Circular],
     called: true },
  req:
   ClientRequest {
     _events:
      [Object: null prototype] {
        drain: [Function],
        error: [Function],
        prefinish: [Function: requestOnPrefinish] },
     _eventsCount: 3,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: true,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: false,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: 43,
     _hasBody: true,
     _trailer: '',
     finished: true,
     _headerSent: true,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 559,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 228 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 559,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 228 },
     _header:
      'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 43\r\nConnection: close\r\n\r\n',
     _onPendingData: [Function: noopPendingOutput],
     agent:
      Agent {
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object],
        requests: {},
        sockets: {},
        freeSockets: {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256 },
     socketPath: undefined,
     timeout: undefined,
     method: 'POST',
     path: '/users/',
     _ended: true,
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [Circular],
        text:
         '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
     aborted: undefined,
     timeoutCb: null,
     upgradeOrConnect: false,
     parser: null,
     maxHeadersCount: null,
     [Symbol(isCorked)]: false,
     [Symbol(outHeadersKey)]:
      [Object: null prototype] {
        host: [Array],
        'accept-encoding': [Array],
        'user-agent': [Array],
        'content-type': [Array],
        'content-length': [Array] } },
  text:
   '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n',
  body: {},
  files: undefined,
  buffered: true,
  headers:
   { 'x-powered-by': 'Express',
     'content-security-policy': 'default-src \'none\'',
     'x-content-type-options': 'nosniff',
     'content-type': 'text/html; charset=utf-8',
     'content-length': '146',
     date: 'Fri, 21 Jun 2019 21:53:22 GMT',
     connection: 'close' },
  header:
   { 'x-powered-by': 'Express',
     'content-security-policy': 'default-src \'none\'',
     'x-content-type-options': 'nosniff',
     'content-type': 'text/html; charset=utf-8',
     'content-length': '146',
     date: 'Fri, 21 Jun 2019 21:53:22 GMT',
     connection: 'close' },
  statusCode: 404,
  status: 404,
  statusType: 4,
  info: false,
  ok: false,
  redirect: false,
  clientError: true,
  serverError: false,
  error:
   { Error: cannot POST /users/ (404)
       at Response.toError (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:98:13)
       at ResponseBase._setStatusProperties (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/response-base.js:119:48)
       at new Response (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:44:8)
       at Request._emitResponse (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:909:18)
       at IncomingMessage.<anonymous> (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:1105:42)
       at IncomingMessage.emit (events.js:194:15)
       at endReadableNT (_stream_readable.js:1125:12)
       at process._tickCallback (internal/process/next_tick.js:63:19)
     status: 404,
     text:
      '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n',
     method: 'POST',
     path: '/users/' },
  created: false,
  accepted: false,
  noContent: false,
  badRequest: false,
  unauthorized: false,
  notAcceptable: false,
  forbidden: false,
  notFound: true,
  unprocessableEntity: false,
  type: 'text/html',
  charset: 'utf-8',
  links: {},
  setEncoding: [Function: bound ],
  redirects: [],
  pipe: [Function] }
404








F--| superagent(method, http://host:portpath) ->POST, http://localhost:8888/users/ || ES client.host -> http://localhost:9200 |
...Response {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  res:
   IncomingMessage {
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: true,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: true,
        decoder: [StringDecoder],
        encoding: 'utf8' },
     readable: false,
     _events:
      [Object: null prototype] {
        end: [Array],
        data: [Array],
        error: [Array],
        close: [Function: bound emit] },
     _eventsCount: 4,
     _maxListeners: undefined,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 603,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 228 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 603,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 228 },
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     httpVersion: '1.1',
     complete: true,
     headers:
      { 'x-powered-by': 'Express',
        'content-security-policy': 'default-src \'none\'',
        'x-content-type-options': 'nosniff',
        'content-type': 'text/html; charset=utf-8',
        'content-length': '146',
        date: 'Fri, 21 Jun 2019 21:53:22 GMT',
        connection: 'close' },
     rawHeaders:
      [ 'X-Powered-By',
        'Express',
        'Content-Security-Policy',
        'default-src \'none\'',
        'X-Content-Type-Options',
        'nosniff',
        'Content-Type',
        'text/html; charset=utf-8',
        'Content-Length',
        '146',
        'Date',
        'Fri, 21 Jun 2019 21:53:22 GMT',
        'Connection',
        'close' ],
     trailers: {},
     rawTrailers: [],
     aborted: false,
     upgrade: false,
     url: '',
     method: null,
     statusCode: 404,
     statusMessage: 'Not Found',
     client:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 603,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 228 },
     _consuming: false,
     _dumped: false,
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 43,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 43\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [Circular],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     text:
      '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
  request:
   Request {
     _events: [Object: null prototype] { abort: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     _enableHttp2: false,
     _agent: false,
     _formData: null,
     method: 'POST',
     url: 'http://localhost:8888/users/',
     _header:
      { 'user-agent': 'node-superagent/5.0.5',
        'content-type': 'application/json' },
     header:
      { 'User-Agent': 'node-superagent/5.0.5',
        'Content-Type': 'application/json' },
     writable: true,
     _redirects: 0,
     _maxRedirects: 5,
     cookies: '',
     qs: {},
     _query: [],
     qsRaw: [],
     _redirectList: [],
     _streamRequest: false,
     _data: '{"email":"a@1.2.3.4","password":"password"}',
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 43,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 43\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [IncomingMessage],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     protocol: 'http:',
     host: 'localhost:8888',
     _endCalled: true,
     _callback: [Function],
     _fullfilledPromise: Promise { <rejected> [Error] },
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [ClientRequest],
        text:
         '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
     _resBuffered: true,
     response: [Circular],
     called: true },
  req:
   ClientRequest {
     _events:
      [Object: null prototype] {
        drain: [Function],
        error: [Function],
        prefinish: [Function: requestOnPrefinish] },
     _eventsCount: 3,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: true,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: false,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: 43,
     _hasBody: true,
     _trailer: '',
     finished: true,
     _headerSent: true,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 603,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 228 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 603,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 228 },
     _header:
      'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 43\r\nConnection: close\r\n\r\n',
     _onPendingData: [Function: noopPendingOutput],
     agent:
      Agent {
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object],
        requests: {},
        sockets: {},
        freeSockets: {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256 },
     socketPath: undefined,
     timeout: undefined,
     method: 'POST',
     path: '/users/',
     _ended: true,
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [Circular],
        text:
         '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
     aborted: undefined,
     timeoutCb: null,
     upgradeOrConnect: false,
     parser: null,
     maxHeadersCount: null,
     [Symbol(isCorked)]: false,
     [Symbol(outHeadersKey)]:
      [Object: null prototype] {
        host: [Array],
        'accept-encoding': [Array],
        'user-agent': [Array],
        'content-type': [Array],
        'content-length': [Array] } },
  text:
   '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n',
  body: {},
  files: undefined,
  buffered: true,
  headers:
   { 'x-powered-by': 'Express',
     'content-security-policy': 'default-src \'none\'',
     'x-content-type-options': 'nosniff',
     'content-type': 'text/html; charset=utf-8',
     'content-length': '146',
     date: 'Fri, 21 Jun 2019 21:53:22 GMT',
     connection: 'close' },
  header:
   { 'x-powered-by': 'Express',
     'content-security-policy': 'default-src \'none\'',
     'x-content-type-options': 'nosniff',
     'content-type': 'text/html; charset=utf-8',
     'content-length': '146',
     date: 'Fri, 21 Jun 2019 21:53:22 GMT',
     connection: 'close' },
  statusCode: 404,
  status: 404,
  statusType: 4,
  info: false,
  ok: false,
  redirect: false,
  clientError: true,
  serverError: false,
  error:
   { Error: cannot POST /users/ (404)
       at Response.toError (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:98:13)
       at ResponseBase._setStatusProperties (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/response-base.js:119:48)
       at new Response (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:44:8)
       at Request._emitResponse (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:909:18)
       at IncomingMessage.<anonymous> (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:1105:42)
       at IncomingMessage.emit (events.js:194:15)
       at endReadableNT (_stream_readable.js:1125:12)
       at process._tickCallback (internal/process/next_tick.js:63:19)
     status: 404,
     text:
      '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n',
     method: 'POST',
     path: '/users/' },
  created: false,
  accepted: false,
  noContent: false,
  badRequest: false,
  unauthorized: false,
  notAcceptable: false,
  forbidden: false,
  notFound: true,
  unprocessableEntity: false,
  type: 'text/html',
  charset: 'utf-8',
  links: {},
  setEncoding: [Function: bound ],
  redirects: [],
  pipe: [Function] }
404








F--| superagent(method, http://host:portpath) ->POST, http://localhost:8888/users/ || ES client.host -> http://localhost:9200 |
...Response {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  res:
   IncomingMessage {
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: true,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: true,
        decoder: [StringDecoder],
        encoding: 'utf8' },
     readable: false,
     _events:
      [Object: null prototype] {
        end: [Array],
        data: [Array],
        error: [Array],
        close: [Function: bound emit] },
     _eventsCount: 4,
     _maxListeners: undefined,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 647,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 227 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 647,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 227 },
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     httpVersion: '1.1',
     complete: true,
     headers:
      { 'x-powered-by': 'Express',
        'content-security-policy': 'default-src \'none\'',
        'x-content-type-options': 'nosniff',
        'content-type': 'text/html; charset=utf-8',
        'content-length': '146',
        date: 'Fri, 21 Jun 2019 21:53:22 GMT',
        connection: 'close' },
     rawHeaders:
      [ 'X-Powered-By',
        'Express',
        'Content-Security-Policy',
        'default-src \'none\'',
        'X-Content-Type-Options',
        'nosniff',
        'Content-Type',
        'text/html; charset=utf-8',
        'Content-Length',
        '146',
        'Date',
        'Fri, 21 Jun 2019 21:53:22 GMT',
        'Connection',
        'close' ],
     trailers: {},
     rawTrailers: [],
     aborted: false,
     upgrade: false,
     url: '',
     method: null,
     statusCode: 404,
     statusMessage: 'Not Found',
     client:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 647,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 227 },
     _consuming: false,
     _dumped: false,
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 42,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 42\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [Circular],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     text:
      '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
  request:
   Request {
     _events: [Object: null prototype] { abort: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     _enableHttp2: false,
     _agent: false,
     _formData: null,
     method: 'POST',
     url: 'http://localhost:8888/users/',
     _header:
      { 'user-agent': 'node-superagent/5.0.5',
        'content-type': 'application/json' },
     header:
      { 'User-Agent': 'node-superagent/5.0.5',
        'Content-Type': 'application/json' },
     writable: true,
     _redirects: 0,
     _maxRedirects: 5,
     cookies: '',
     qs: {},
     _query: [],
     qsRaw: [],
     _redirectList: [],
     _streamRequest: false,
     _data: '{"email":"a,b,c@!!","password":"password"}',
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 42,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 42\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [IncomingMessage],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     protocol: 'http:',
     host: 'localhost:8888',
     _endCalled: true,
     _callback: [Function],
     _fullfilledPromise: Promise { <rejected> [Error] },
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [ClientRequest],
        text:
         '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
     _resBuffered: true,
     response: [Circular],
     called: true },
  req:
   ClientRequest {
     _events:
      [Object: null prototype] {
        drain: [Function],
        error: [Function],
        prefinish: [Function: requestOnPrefinish] },
     _eventsCount: 3,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: true,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: false,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: 42,
     _hasBody: true,
     _trailer: '',
     finished: true,
     _headerSent: true,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 647,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 227 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 647,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 227 },
     _header:
      'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 42\r\nConnection: close\r\n\r\n',
     _onPendingData: [Function: noopPendingOutput],
     agent:
      Agent {
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object],
        requests: {},
        sockets: {},
        freeSockets: {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256 },
     socketPath: undefined,
     timeout: undefined,
     method: 'POST',
     path: '/users/',
     _ended: true,
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [Circular],
        text:
         '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
     aborted: undefined,
     timeoutCb: null,
     upgradeOrConnect: false,
     parser: null,
     maxHeadersCount: null,
     [Symbol(isCorked)]: false,
     [Symbol(outHeadersKey)]:
      [Object: null prototype] {
        host: [Array],
        'accept-encoding': [Array],
        'user-agent': [Array],
        'content-type': [Array],
        'content-length': [Array] } },
  text:
   '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n',
  body: {},
  files: undefined,
  buffered: true,
  headers:
   { 'x-powered-by': 'Express',
     'content-security-policy': 'default-src \'none\'',
     'x-content-type-options': 'nosniff',
     'content-type': 'text/html; charset=utf-8',
     'content-length': '146',
     date: 'Fri, 21 Jun 2019 21:53:22 GMT',
     connection: 'close' },
  header:
   { 'x-powered-by': 'Express',
     'content-security-policy': 'default-src \'none\'',
     'x-content-type-options': 'nosniff',
     'content-type': 'text/html; charset=utf-8',
     'content-length': '146',
     date: 'Fri, 21 Jun 2019 21:53:22 GMT',
     connection: 'close' },
  statusCode: 404,
  status: 404,
  statusType: 4,
  info: false,
  ok: false,
  redirect: false,
  clientError: true,
  serverError: false,
  error:
   { Error: cannot POST /users/ (404)
       at Response.toError (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:98:13)
       at ResponseBase._setStatusProperties (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/response-base.js:119:48)
       at new Response (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:44:8)
       at Request._emitResponse (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:909:18)
       at IncomingMessage.<anonymous> (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:1105:42)
       at IncomingMessage.emit (events.js:194:15)
       at endReadableNT (_stream_readable.js:1125:12)
       at process._tickCallback (internal/process/next_tick.js:63:19)
     status: 404,
     text:
      '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n',
     method: 'POST',
     path: '/users/' },
  created: false,
  accepted: false,
  noContent: false,
  badRequest: false,
  unauthorized: false,
  notAcceptable: false,
  forbidden: false,
  notFound: true,
  unprocessableEntity: false,
  type: 'text/html',
  charset: 'utf-8',
  links: {},
  setEncoding: [Function: bound ],
  redirects: [],
  pipe: [Function] }
404








F--| superagent(method, http://host:portpath) ->POST, http://localhost:8888/users/ || ES client.host -> http://localhost:9200 |
...Response {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  res:
   IncomingMessage {
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: true,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: true,
        decoder: [StringDecoder],
        encoding: 'utf8' },
     readable: false,
     _events:
      [Object: null prototype] {
        end: [Array],
        data: [Array],
        error: [Array],
        close: [Function: bound emit] },
     _eventsCount: 4,
     _maxListeners: undefined,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 691,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 226 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 691,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 226 },
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     httpVersion: '1.1',
     complete: true,
     headers:
      { 'x-powered-by': 'Express',
        'content-security-policy': 'default-src \'none\'',
        'x-content-type-options': 'nosniff',
        'content-type': 'text/html; charset=utf-8',
        'content-length': '146',
        date: 'Fri, 21 Jun 2019 21:53:22 GMT',
        connection: 'close' },
     rawHeaders:
      [ 'X-Powered-By',
        'Express',
        'Content-Security-Policy',
        'default-src \'none\'',
        'X-Content-Type-Options',
        'nosniff',
        'Content-Type',
        'text/html; charset=utf-8',
        'Content-Length',
        '146',
        'Date',
        'Fri, 21 Jun 2019 21:53:22 GMT',
        'Connection',
        'close' ],
     trailers: {},
     rawTrailers: [],
     aborted: false,
     upgrade: false,
     url: '',
     method: null,
     statusCode: 404,
     statusMessage: 'Not Found',
     client:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 691,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 226 },
     _consuming: false,
     _dumped: false,
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 41,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 41\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [Circular],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     text:
      '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
  request:
   Request {
     _events: [Object: null prototype] { abort: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     _enableHttp2: false,
     _agent: false,
     _formData: null,
     method: 'POST',
     url: 'http://localhost:8888/users/',
     _header:
      { 'user-agent': 'node-superagent/5.0.5',
        'content-type': 'application/json' },
     header:
      { 'User-Agent': 'node-superagent/5.0.5',
        'Content-Type': 'application/json' },
     writable: true,
     _redirects: 0,
     _maxRedirects: 5,
     cookies: '',
     qs: {},
     _query: [],
     qsRaw: [],
     _redirectList: [],
     _streamRequest: false,
     _data: '{"email":"e@ma.il","password":"password"}',
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 41,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 41\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [IncomingMessage],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     protocol: 'http:',
     host: 'localhost:8888',
     _endCalled: true,
     _callback: [Function],
     _fullfilledPromise: Promise { <rejected> [Error] },
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [ClientRequest],
        text:
         '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
     _resBuffered: true,
     response: [Circular],
     called: true },
  req:
   ClientRequest {
     _events:
      [Object: null prototype] {
        drain: [Function],
        error: [Function],
        prefinish: [Function: requestOnPrefinish] },
     _eventsCount: 3,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: true,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: false,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: 41,
     _hasBody: true,
     _trailer: '',
     finished: true,
     _headerSent: true,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 691,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 226 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 691,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 226 },
     _header:
      'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 41\r\nConnection: close\r\n\r\n',
     _onPendingData: [Function: noopPendingOutput],
     agent:
      Agent {
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object],
        requests: {},
        sockets: {},
        freeSockets: {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256 },
     socketPath: undefined,
     timeout: undefined,
     method: 'POST',
     path: '/users/',
     _ended: true,
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [Circular],
        text:
         '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
     aborted: undefined,
     timeoutCb: null,
     upgradeOrConnect: false,
     parser: null,
     maxHeadersCount: null,
     [Symbol(isCorked)]: false,
     [Symbol(outHeadersKey)]:
      [Object: null prototype] {
        host: [Array],
        'accept-encoding': [Array],
        'user-agent': [Array],
        'content-type': [Array],
        'content-length': [Array] } },
  text:
   '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n',
  body: {},
  files: undefined,
  buffered: true,
  headers:
   { 'x-powered-by': 'Express',
     'content-security-policy': 'default-src \'none\'',
     'x-content-type-options': 'nosniff',
     'content-type': 'text/html; charset=utf-8',
     'content-length': '146',
     date: 'Fri, 21 Jun 2019 21:53:22 GMT',
     connection: 'close' },
  header:
   { 'x-powered-by': 'Express',
     'content-security-policy': 'default-src \'none\'',
     'x-content-type-options': 'nosniff',
     'content-type': 'text/html; charset=utf-8',
     'content-length': '146',
     date: 'Fri, 21 Jun 2019 21:53:22 GMT',
     connection: 'close' },
  statusCode: 404,
  status: 404,
  statusType: 4,
  info: false,
  ok: false,
  redirect: false,
  clientError: true,
  serverError: false,
  error:
   { Error: cannot POST /users/ (404)
       at Response.toError (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:98:13)
       at ResponseBase._setStatusProperties (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/response-base.js:119:48)
       at new Response (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:44:8)
       at Request._emitResponse (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:909:18)
       at IncomingMessage.<anonymous> (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:1105:42)
       at IncomingMessage.emit (events.js:194:15)
       at endReadableNT (_stream_readable.js:1125:12)
       at process._tickCallback (internal/process/next_tick.js:63:19)
     status: 404,
     text:
      '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n',
     method: 'POST',
     path: '/users/' },
  created: false,
  accepted: false,
  noContent: false,
  badRequest: false,
  unauthorized: false,
  notAcceptable: false,
  forbidden: false,
  notFound: true,
  unprocessableEntity: false,
  type: 'text/html',
  charset: 'utf-8',
  links: {},
  setEncoding: [Function: bound ],
  redirects: [],
  pipe: [Function] }
404








F---| superagent(method, http://host:portpath) ->POST, http://localhost:8888/users/ || ES client.host -> http://localhost:9200 |
...Response {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  res:
   IncomingMessage {
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: true,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: true,
        decoder: [StringDecoder],
        encoding: 'utf8' },
     readable: false,
     _events:
      [Object: null prototype] {
        end: [Array],
        data: [Array],
        error: [Array],
        close: [Function: bound emit] },
     _eventsCount: 4,
     _maxListeners: undefined,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 737,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 245 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 737,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 245 },
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     httpVersion: '1.1',
     complete: true,
     headers:
      { 'x-powered-by': 'Express',
        'content-security-policy': 'default-src \'none\'',
        'x-content-type-options': 'nosniff',
        'content-type': 'text/html; charset=utf-8',
        'content-length': '146',
        date: 'Fri, 21 Jun 2019 21:53:22 GMT',
        connection: 'close' },
     rawHeaders:
      [ 'X-Powered-By',
        'Express',
        'Content-Security-Policy',
        'default-src \'none\'',
        'X-Content-Type-Options',
        'nosniff',
        'Content-Type',
        'text/html; charset=utf-8',
        'Content-Length',
        '146',
        'Date',
        'Fri, 21 Jun 2019 21:53:22 GMT',
        'Connection',
        'close' ],
     trailers: {},
     rawTrailers: [],
     aborted: false,
     upgrade: false,
     url: '',
     method: null,
     statusCode: 404,
     statusMessage: 'Not Found',
     client:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 737,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 245 },
     _consuming: false,
     _dumped: false,
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 60,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 60\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [Circular],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     text:
      '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
  request:
   Request {
     _events: [Object: null prototype] { abort: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     _enableHttp2: false,
     _agent: false,
     _formData: null,
     method: 'POST',
     url: 'http://localhost:8888/users/',
     _header:
      { 'user-agent': 'node-superagent/5.0.5',
        'content-type': 'application/json' },
     header:
      { 'User-Agent': 'node-superagent/5.0.5',
        'Content-Type': 'application/json' },
     writable: true,
     _redirects: 0,
     _maxRedirects: 5,
     cookies: '',
     qs: {},
     _query: [],
     qsRaw: [],
     _redirectList: [],
     _streamRequest: false,
     _data:
      '{"email":"e@ma.il","password":"abc","profile":{"foo":"bar"}}',
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 60,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 60\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [IncomingMessage],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     protocol: 'http:',
     host: 'localhost:8888',
     _endCalled: true,
     _callback: [Function],
     _fullfilledPromise: Promise { <rejected> [Error] },
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [ClientRequest],
        text:
         '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
     _resBuffered: true,
     response: [Circular],
     called: true },
  req:
   ClientRequest {
     _events:
      [Object: null prototype] {
        drain: [Function],
        error: [Function],
        prefinish: [Function: requestOnPrefinish] },
     _eventsCount: 3,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: true,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: false,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: 60,
     _hasBody: true,
     _trailer: '',
     finished: true,
     _headerSent: true,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 737,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 245 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 737,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 245 },
     _header:
      'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 60\r\nConnection: close\r\n\r\n',
     _onPendingData: [Function: noopPendingOutput],
     agent:
      Agent {
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object],
        requests: {},
        sockets: {},
        freeSockets: {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256 },
     socketPath: undefined,
     timeout: undefined,
     method: 'POST',
     path: '/users/',
     _ended: true,
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [Circular],
        text:
         '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
     aborted: undefined,
     timeoutCb: null,
     upgradeOrConnect: false,
     parser: null,
     maxHeadersCount: null,
     [Symbol(isCorked)]: false,
     [Symbol(outHeadersKey)]:
      [Object: null prototype] {
        host: [Array],
        'accept-encoding': [Array],
        'user-agent': [Array],
        'content-type': [Array],
        'content-length': [Array] } },
  text:
   '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n',
  body: {},
  files: undefined,
  buffered: true,
  headers:
   { 'x-powered-by': 'Express',
     'content-security-policy': 'default-src \'none\'',
     'x-content-type-options': 'nosniff',
     'content-type': 'text/html; charset=utf-8',
     'content-length': '146',
     date: 'Fri, 21 Jun 2019 21:53:22 GMT',
     connection: 'close' },
  header:
   { 'x-powered-by': 'Express',
     'content-security-policy': 'default-src \'none\'',
     'x-content-type-options': 'nosniff',
     'content-type': 'text/html; charset=utf-8',
     'content-length': '146',
     date: 'Fri, 21 Jun 2019 21:53:22 GMT',
     connection: 'close' },
  statusCode: 404,
  status: 404,
  statusType: 4,
  info: false,
  ok: false,
  redirect: false,
  clientError: true,
  serverError: false,
  error:
   { Error: cannot POST /users/ (404)
       at Response.toError (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:98:13)
       at ResponseBase._setStatusProperties (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/response-base.js:119:48)
       at new Response (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:44:8)
       at Request._emitResponse (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:909:18)
       at IncomingMessage.<anonymous> (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:1105:42)
       at IncomingMessage.emit (events.js:194:15)
       at endReadableNT (_stream_readable.js:1125:12)
       at process._tickCallback (internal/process/next_tick.js:63:19)
     status: 404,
     text:
      '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n',
     method: 'POST',
     path: '/users/' },
  created: false,
  accepted: false,
  noContent: false,
  badRequest: false,
  unauthorized: false,
  notAcceptable: false,
  forbidden: false,
  notFound: true,
  unprocessableEntity: false,
  type: 'text/html',
  charset: 'utf-8',
  links: {},
  setEncoding: [Function: bound ],
  redirects: [],
  pipe: [Function] }
404








F--| superagent(method, http://host:portpath) ->POST, http://localhost:8888/users/ || ES client.host -> http://localhost:9200 |
...Response {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  res:
   IncomingMessage {
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: true,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: true,
        decoder: [StringDecoder],
        encoding: 'utf8' },
     readable: false,
     _events:
      [Object: null prototype] {
        end: [Array],
        data: [Array],
        error: [Array],
        close: [Function: bound emit] },
     _eventsCount: 4,
     _maxListeners: undefined,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 781,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 265 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 781,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 265 },
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     httpVersion: '1.1',
     complete: true,
     headers:
      { 'x-powered-by': 'Express',
        'content-security-policy': 'default-src \'none\'',
        'x-content-type-options': 'nosniff',
        'content-type': 'text/html; charset=utf-8',
        'content-length': '146',
        date: 'Fri, 21 Jun 2019 21:53:22 GMT',
        connection: 'close' },
     rawHeaders:
      [ 'X-Powered-By',
        'Express',
        'Content-Security-Policy',
        'default-src \'none\'',
        'X-Content-Type-Options',
        'nosniff',
        'Content-Type',
        'text/html; charset=utf-8',
        'Content-Length',
        '146',
        'Date',
        'Fri, 21 Jun 2019 21:53:22 GMT',
        'Connection',
        'close' ],
     trailers: {},
     rawTrailers: [],
     aborted: false,
     upgrade: false,
     url: '',
     method: null,
     statusCode: 404,
     statusMessage: 'Not Found',
     client:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 781,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 265 },
     _consuming: false,
     _dumped: false,
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 80,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 80\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [Circular],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     text:
      '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
  request:
   Request {
     _events: [Object: null prototype] { abort: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     _enableHttp2: false,
     _agent: false,
     _formData: null,
     method: 'POST',
     url: 'http://localhost:8888/users/',
     _header:
      { 'user-agent': 'node-superagent/5.0.5',
        'content-type': 'application/json' },
     header:
      { 'User-Agent': 'node-superagent/5.0.5',
        'Content-Type': 'application/json' },
     writable: true,
     _redirects: 0,
     _maxRedirects: 5,
     cookies: '',
     qs: {},
     _query: [],
     qsRaw: [],
     _redirectList: [],
     _streamRequest: false,
     _data:
      '{"email":"e@ma.il","password":"abc","profile":{"name":{"first":"Jane","a":"b"}}}',
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 80,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 80\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [IncomingMessage],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     protocol: 'http:',
     host: 'localhost:8888',
     _endCalled: true,
     _callback: [Function],
     _fullfilledPromise: Promise { <rejected> [Error] },
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [ClientRequest],
        text:
         '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
     _resBuffered: true,
     response: [Circular],
     called: true },
  req:
   ClientRequest {
     _events:
      [Object: null prototype] {
        drain: [Function],
        error: [Function],
        prefinish: [Function: requestOnPrefinish] },
     _eventsCount: 3,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: true,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: false,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: 80,
     _hasBody: true,
     _trailer: '',
     finished: true,
     _headerSent: true,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 781,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 265 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 781,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 265 },
     _header:
      'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 80\r\nConnection: close\r\n\r\n',
     _onPendingData: [Function: noopPendingOutput],
     agent:
      Agent {
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object],
        requests: {},
        sockets: {},
        freeSockets: {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256 },
     socketPath: undefined,
     timeout: undefined,
     method: 'POST',
     path: '/users/',
     _ended: true,
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [Circular],
        text:
         '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
     aborted: undefined,
     timeoutCb: null,
     upgradeOrConnect: false,
     parser: null,
     maxHeadersCount: null,
     [Symbol(isCorked)]: false,
     [Symbol(outHeadersKey)]:
      [Object: null prototype] {
        host: [Array],
        'accept-encoding': [Array],
        'user-agent': [Array],
        'content-type': [Array],
        'content-length': [Array] } },
  text:
   '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n',
  body: {},
  files: undefined,
  buffered: true,
  headers:
   { 'x-powered-by': 'Express',
     'content-security-policy': 'default-src \'none\'',
     'x-content-type-options': 'nosniff',
     'content-type': 'text/html; charset=utf-8',
     'content-length': '146',
     date: 'Fri, 21 Jun 2019 21:53:22 GMT',
     connection: 'close' },
  header:
   { 'x-powered-by': 'Express',
     'content-security-policy': 'default-src \'none\'',
     'x-content-type-options': 'nosniff',
     'content-type': 'text/html; charset=utf-8',
     'content-length': '146',
     date: 'Fri, 21 Jun 2019 21:53:22 GMT',
     connection: 'close' },
  statusCode: 404,
  status: 404,
  statusType: 4,
  info: false,
  ok: false,
  redirect: false,
  clientError: true,
  serverError: false,
  error:
   { Error: cannot POST /users/ (404)
       at Response.toError (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:98:13)
       at ResponseBase._setStatusProperties (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/response-base.js:119:48)
       at new Response (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:44:8)
       at Request._emitResponse (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:909:18)
       at IncomingMessage.<anonymous> (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:1105:42)
       at IncomingMessage.emit (events.js:194:15)
       at endReadableNT (_stream_readable.js:1125:12)
       at process._tickCallback (internal/process/next_tick.js:63:19)
     status: 404,
     text:
      '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n',
     method: 'POST',
     path: '/users/' },
  created: false,
  accepted: false,
  noContent: false,
  badRequest: false,
  unauthorized: false,
  notAcceptable: false,
  forbidden: false,
  notFound: true,
  unprocessableEntity: false,
  type: 'text/html',
  charset: 'utf-8',
  links: {},
  setEncoding: [Function: bound ],
  redirects: [],
  pipe: [Function] }
404








F--| superagent(method, http://host:portpath) ->POST, http://localhost:8888/users/ || ES client.host -> http://localhost:9200 |
...Response {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  res:
   IncomingMessage {
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: true,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: true,
        decoder: [StringDecoder],
        encoding: 'utf8' },
     readable: false,
     _events:
      [Object: null prototype] {
        end: [Array],
        data: [Array],
        error: [Array],
        close: [Function: bound emit] },
     _eventsCount: 4,
     _maxListeners: undefined,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 825,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 245 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 825,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 245 },
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     httpVersion: '1.1',
     complete: true,
     headers:
      { 'x-powered-by': 'Express',
        'content-security-policy': 'default-src \'none\'',
        'x-content-type-options': 'nosniff',
        'content-type': 'text/html; charset=utf-8',
        'content-length': '146',
        date: 'Fri, 21 Jun 2019 21:53:22 GMT',
        connection: 'close' },
     rawHeaders:
      [ 'X-Powered-By',
        'Express',
        'Content-Security-Policy',
        'default-src \'none\'',
        'X-Content-Type-Options',
        'nosniff',
        'Content-Type',
        'text/html; charset=utf-8',
        'Content-Length',
        '146',
        'Date',
        'Fri, 21 Jun 2019 21:53:22 GMT',
        'Connection',
        'close' ],
     trailers: {},
     rawTrailers: [],
     aborted: false,
     upgrade: false,
     url: '',
     method: null,
     statusCode: 404,
     statusMessage: 'Not Found',
     client:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 825,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 245 },
     _consuming: false,
     _dumped: false,
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 60,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 60\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [Circular],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     text:
      '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
  request:
   Request {
     _events: [Object: null prototype] { abort: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     _enableHttp2: false,
     _agent: false,
     _formData: null,
     method: 'POST',
     url: 'http://localhost:8888/users/',
     _header:
      { 'user-agent': 'node-superagent/5.0.5',
        'content-type': 'application/json' },
     header:
      { 'User-Agent': 'node-superagent/5.0.5',
        'Content-Type': 'application/json' },
     writable: true,
     _redirects: 0,
     _maxRedirects: 5,
     cookies: '',
     qs: {},
     _query: [],
     qsRaw: [],
     _redirectList: [],
     _streamRequest: false,
     _data:
      '{"email":"e@ma.il","password":"abc","profile":{"summary":0}}',
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 60,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 60\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [IncomingMessage],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     protocol: 'http:',
     host: 'localhost:8888',
     _endCalled: true,
     _callback: [Function],
     _fullfilledPromise: Promise { <rejected> [Error] },
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [ClientRequest],
        text:
         '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
     _resBuffered: true,
     response: [Circular],
     called: true },
  req:
   ClientRequest {
     _events:
      [Object: null prototype] {
        drain: [Function],
        error: [Function],
        prefinish: [Function: requestOnPrefinish] },
     _eventsCount: 3,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: true,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: false,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: 60,
     _hasBody: true,
     _trailer: '',
     finished: true,
     _headerSent: true,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 825,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 245 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 825,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 245 },
     _header:
      'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 60\r\nConnection: close\r\n\r\n',
     _onPendingData: [Function: noopPendingOutput],
     agent:
      Agent {
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object],
        requests: {},
        sockets: {},
        freeSockets: {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256 },
     socketPath: undefined,
     timeout: undefined,
     method: 'POST',
     path: '/users/',
     _ended: true,
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [Circular],
        text:
         '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
     aborted: undefined,
     timeoutCb: null,
     upgradeOrConnect: false,
     parser: null,
     maxHeadersCount: null,
     [Symbol(isCorked)]: false,
     [Symbol(outHeadersKey)]:
      [Object: null prototype] {
        host: [Array],
        'accept-encoding': [Array],
        'user-agent': [Array],
        'content-type': [Array],
        'content-length': [Array] } },
  text:
   '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n',
  body: {},
  files: undefined,
  buffered: true,
  headers:
   { 'x-powered-by': 'Express',
     'content-security-policy': 'default-src \'none\'',
     'x-content-type-options': 'nosniff',
     'content-type': 'text/html; charset=utf-8',
     'content-length': '146',
     date: 'Fri, 21 Jun 2019 21:53:22 GMT',
     connection: 'close' },
  header:
   { 'x-powered-by': 'Express',
     'content-security-policy': 'default-src \'none\'',
     'x-content-type-options': 'nosniff',
     'content-type': 'text/html; charset=utf-8',
     'content-length': '146',
     date: 'Fri, 21 Jun 2019 21:53:22 GMT',
     connection: 'close' },
  statusCode: 404,
  status: 404,
  statusType: 4,
  info: false,
  ok: false,
  redirect: false,
  clientError: true,
  serverError: false,
  error:
   { Error: cannot POST /users/ (404)
       at Response.toError (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:98:13)
       at ResponseBase._setStatusProperties (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/response-base.js:119:48)
       at new Response (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:44:8)
       at Request._emitResponse (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:909:18)
       at IncomingMessage.<anonymous> (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:1105:42)
       at IncomingMessage.emit (events.js:194:15)
       at endReadableNT (_stream_readable.js:1125:12)
       at process._tickCallback (internal/process/next_tick.js:63:19)
     status: 404,
     text:
      '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n',
     method: 'POST',
     path: '/users/' },
  created: false,
  accepted: false,
  noContent: false,
  badRequest: false,
  unauthorized: false,
  notAcceptable: false,
  forbidden: false,
  notFound: true,
  unprocessableEntity: false,
  type: 'text/html',
  charset: 'utf-8',
  links: {},
  setEncoding: [Function: bound ],
  redirects: [],
  pipe: [Function] }
404








F--| superagent(method, http://host:portpath) ->POST, http://localhost:8888/users/ || ES client.host -> http://localhost:9200 |
...Response {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  res:
   IncomingMessage {
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: true,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: true,
        decoder: [StringDecoder],
        encoding: 'utf8' },
     readable: false,
     _events:
      [Object: null prototype] {
        end: [Array],
        data: [Array],
        error: [Array],
        close: [Function: bound emit] },
     _eventsCount: 4,
     _maxListeners: undefined,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 869,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 241 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 869,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 241 },
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     httpVersion: '1.1',
     complete: true,
     headers:
      { 'x-powered-by': 'Express',
        'content-security-policy': 'default-src \'none\'',
        'x-content-type-options': 'nosniff',
        'content-type': 'text/html; charset=utf-8',
        'content-length': '146',
        date: 'Fri, 21 Jun 2019 21:53:22 GMT',
        connection: 'close' },
     rawHeaders:
      [ 'X-Powered-By',
        'Express',
        'Content-Security-Policy',
        'default-src \'none\'',
        'X-Content-Type-Options',
        'nosniff',
        'Content-Type',
        'text/html; charset=utf-8',
        'Content-Length',
        '146',
        'Date',
        'Fri, 21 Jun 2019 21:53:22 GMT',
        'Connection',
        'close' ],
     trailers: {},
     rawTrailers: [],
     aborted: false,
     upgrade: false,
     url: '',
     method: null,
     statusCode: 404,
     statusMessage: 'Not Found',
     client:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 869,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 241 },
     _consuming: false,
     _dumped: false,
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 56,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 56\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [Circular],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     text:
      '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
  request:
   Request {
     _events: [Object: null prototype] { abort: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     _enableHttp2: false,
     _agent: false,
     _formData: null,
     method: 'POST',
     url: 'http://localhost:8888/users/',
     _header:
      { 'user-agent': 'node-superagent/5.0.5',
        'content-type': 'application/json' },
     header:
      { 'User-Agent': 'node-superagent/5.0.5',
        'Content-Type': 'application/json' },
     writable: true,
     _redirects: 0,
     _maxRedirects: 5,
     cookies: '',
     qs: {},
     _query: [],
     qsRaw: [],
     _redirectList: [],
     _streamRequest: false,
     _data: '{"email":"e@ma.il","password":"abc","profile":{"bio":0}}',
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 56,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 56\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [IncomingMessage],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     protocol: 'http:',
     host: 'localhost:8888',
     _endCalled: true,
     _callback: [Function],
     _fullfilledPromise: Promise { <rejected> [Error] },
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [ClientRequest],
        text:
         '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
     _resBuffered: true,
     response: [Circular],
     called: true },
  req:
   ClientRequest {
     _events:
      [Object: null prototype] {
        drain: [Function],
        error: [Function],
        prefinish: [Function: requestOnPrefinish] },
     _eventsCount: 3,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: true,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: false,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: 56,
     _hasBody: true,
     _trailer: '',
     finished: true,
     _headerSent: true,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 869,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 241 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 869,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 241 },
     _header:
      'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 56\r\nConnection: close\r\n\r\n',
     _onPendingData: [Function: noopPendingOutput],
     agent:
      Agent {
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object],
        requests: {},
        sockets: {},
        freeSockets: {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256 },
     socketPath: undefined,
     timeout: undefined,
     method: 'POST',
     path: '/users/',
     _ended: true,
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [Circular],
        text:
         '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
     aborted: undefined,
     timeoutCb: null,
     upgradeOrConnect: false,
     parser: null,
     maxHeadersCount: null,
     [Symbol(isCorked)]: false,
     [Symbol(outHeadersKey)]:
      [Object: null prototype] {
        host: [Array],
        'accept-encoding': [Array],
        'user-agent': [Array],
        'content-type': [Array],
        'content-length': [Array] } },
  text:
   '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n',
  body: {},
  files: undefined,
  buffered: true,
  headers:
   { 'x-powered-by': 'Express',
     'content-security-policy': 'default-src \'none\'',
     'x-content-type-options': 'nosniff',
     'content-type': 'text/html; charset=utf-8',
     'content-length': '146',
     date: 'Fri, 21 Jun 2019 21:53:22 GMT',
     connection: 'close' },
  header:
   { 'x-powered-by': 'Express',
     'content-security-policy': 'default-src \'none\'',
     'x-content-type-options': 'nosniff',
     'content-type': 'text/html; charset=utf-8',
     'content-length': '146',
     date: 'Fri, 21 Jun 2019 21:53:22 GMT',
     connection: 'close' },
  statusCode: 404,
  status: 404,
  statusType: 4,
  info: false,
  ok: false,
  redirect: false,
  clientError: true,
  serverError: false,
  error:
   { Error: cannot POST /users/ (404)
       at Response.toError (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:98:13)
       at ResponseBase._setStatusProperties (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/response-base.js:119:48)
       at new Response (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:44:8)
       at Request._emitResponse (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:909:18)
       at IncomingMessage.<anonymous> (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:1105:42)
       at IncomingMessage.emit (events.js:194:15)
       at endReadableNT (_stream_readable.js:1125:12)
       at process._tickCallback (internal/process/next_tick.js:63:19)
     status: 404,
     text:
      '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n',
     method: 'POST',
     path: '/users/' },
  created: false,
  accepted: false,
  noContent: false,
  badRequest: false,
  unauthorized: false,
  notAcceptable: false,
  forbidden: false,
  notFound: true,
  unprocessableEntity: false,
  type: 'text/html',
  charset: 'utf-8',
  links: {},
  setEncoding: [Function: bound ],
  redirects: [],
  pipe: [Function] }
404








F--| superagent(method, http://host:portpath) ->POST, http://localhost:8888/users/ || ES client.host -> http://localhost:9200 |
...Response {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  res:
   IncomingMessage {
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: true,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: true,
        decoder: [StringDecoder],
        encoding: 'utf8' },
     readable: false,
     _events:
      [Object: null prototype] {
        end: [Array],
        data: [Array],
        error: [Array],
        close: [Function: bound emit] },
     _eventsCount: 4,
     _maxListeners: undefined,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 913,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 239 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 913,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 239 },
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     httpVersion: '1.1',
     complete: true,
     headers:
      { 'x-powered-by': 'Express',
        'content-security-policy': 'default-src \'none\'',
        'x-content-type-options': 'nosniff',
        'content-type': 'text/html; charset=utf-8',
        'content-length': '146',
        date: 'Fri, 21 Jun 2019 21:53:22 GMT',
        connection: 'close' },
     rawHeaders:
      [ 'X-Powered-By',
        'Express',
        'Content-Security-Policy',
        'default-src \'none\'',
        'X-Content-Type-Options',
        'nosniff',
        'Content-Type',
        'text/html; charset=utf-8',
        'Content-Length',
        '146',
        'Date',
        'Fri, 21 Jun 2019 21:53:22 GMT',
        'Connection',
        'close' ],
     trailers: {},
     rawTrailers: [],
     aborted: false,
     upgrade: false,
     url: '',
     method: null,
     statusCode: 404,
     statusMessage: 'Not Found',
     client:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 913,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 239 },
     _consuming: false,
     _dumped: false,
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 54,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 54\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [Circular],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     text:
      '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
  request:
   Request {
     _events: [Object: null prototype] { abort: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     _enableHttp2: false,
     _agent: false,
     _formData: null,
     method: 'POST',
     url: 'http://localhost:8888/users/',
     _header:
      { 'user-agent': 'node-superagent/5.0.5',
        'content-type': 'application/json' },
     header:
      { 'User-Agent': 'node-superagent/5.0.5',
        'Content-Type': 'application/json' },
     writable: true,
     _redirects: 0,
     _maxRedirects: 5,
     cookies: '',
     qs: {},
     _query: [],
     qsRaw: [],
     _redirectList: [],
     _streamRequest: false,
     _data: '{"email":"e@ma.il","password":"password","profile":{}}',
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 54,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 54\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [IncomingMessage],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     protocol: 'http:',
     host: 'localhost:8888',
     _endCalled: true,
     _callback: [Function],
     _fullfilledPromise: Promise { <rejected> [Error] },
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [ClientRequest],
        text:
         '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
     _resBuffered: true,
     response: [Circular],
     called: true },
  req:
   ClientRequest {
     _events:
      [Object: null prototype] {
        drain: [Function],
        error: [Function],
        prefinish: [Function: requestOnPrefinish] },
     _eventsCount: 3,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: true,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: false,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: 54,
     _hasBody: true,
     _trailer: '',
     finished: true,
     _headerSent: true,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 913,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 239 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 913,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 239 },
     _header:
      'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 54\r\nConnection: close\r\n\r\n',
     _onPendingData: [Function: noopPendingOutput],
     agent:
      Agent {
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object],
        requests: {},
        sockets: {},
        freeSockets: {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256 },
     socketPath: undefined,
     timeout: undefined,
     method: 'POST',
     path: '/users/',
     _ended: true,
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [Circular],
        text:
         '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
     aborted: undefined,
     timeoutCb: null,
     upgradeOrConnect: false,
     parser: null,
     maxHeadersCount: null,
     [Symbol(isCorked)]: false,
     [Symbol(outHeadersKey)]:
      [Object: null prototype] {
        host: [Array],
        'accept-encoding': [Array],
        'user-agent': [Array],
        'content-type': [Array],
        'content-length': [Array] } },
  text:
   '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n',
  body: {},
  files: undefined,
  buffered: true,
  headers:
   { 'x-powered-by': 'Express',
     'content-security-policy': 'default-src \'none\'',
     'x-content-type-options': 'nosniff',
     'content-type': 'text/html; charset=utf-8',
     'content-length': '146',
     date: 'Fri, 21 Jun 2019 21:53:22 GMT',
     connection: 'close' },
  header:
   { 'x-powered-by': 'Express',
     'content-security-policy': 'default-src \'none\'',
     'x-content-type-options': 'nosniff',
     'content-type': 'text/html; charset=utf-8',
     'content-length': '146',
     date: 'Fri, 21 Jun 2019 21:53:22 GMT',
     connection: 'close' },
  statusCode: 404,
  status: 404,
  statusType: 4,
  info: false,
  ok: false,
  redirect: false,
  clientError: true,
  serverError: false,
  error:
   { Error: cannot POST /users/ (404)
       at Response.toError (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:98:13)
       at ResponseBase._setStatusProperties (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/response-base.js:119:48)
       at new Response (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:44:8)
       at Request._emitResponse (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:909:18)
       at IncomingMessage.<anonymous> (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:1105:42)
       at IncomingMessage.emit (events.js:194:15)
       at endReadableNT (_stream_readable.js:1125:12)
       at process._tickCallback (internal/process/next_tick.js:63:19)
     status: 404,
     text:
      '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n',
     method: 'POST',
     path: '/users/' },
  created: false,
  accepted: false,
  noContent: false,
  badRequest: false,
  unauthorized: false,
  notAcceptable: false,
  forbidden: false,
  notFound: true,
  unprocessableEntity: false,
  type: 'text/html',
  charset: 'utf-8',
  links: {},
  setEncoding: [Function: bound ],
  redirects: [],
  pipe: [Function] }
404








F---| superagent(method, http://host:portpath) ->POST, http://localhost:8888/users/ || ES client.host -> http://localhost:9200 |
...Response {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  res:
   IncomingMessage {
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: true,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: true,
        decoder: [StringDecoder],
        encoding: 'utf8' },
     readable: false,
     _events:
      [Object: null prototype] {
        end: [Array],
        data: [Array],
        error: [Array],
        close: [Function: bound emit] },
     _eventsCount: 4,
     _maxListeners: undefined,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 959,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 248 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 959,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 248 },
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     httpVersion: '1.1',
     complete: true,
     headers:
      { 'x-powered-by': 'Express',
        'content-security-policy': 'default-src \'none\'',
        'x-content-type-options': 'nosniff',
        'content-type': 'text/html; charset=utf-8',
        'content-length': '146',
        date: 'Fri, 21 Jun 2019 21:53:22 GMT',
        connection: 'close' },
     rawHeaders:
      [ 'X-Powered-By',
        'Express',
        'Content-Security-Policy',
        'default-src \'none\'',
        'X-Content-Type-Options',
        'nosniff',
        'Content-Type',
        'text/html; charset=utf-8',
        'Content-Length',
        '146',
        'Date',
        'Fri, 21 Jun 2019 21:53:22 GMT',
        'Connection',
        'close' ],
     trailers: {},
     rawTrailers: [],
     aborted: false,
     upgrade: false,
     url: '',
     method: null,
     statusCode: 404,
     statusMessage: 'Not Found',
     client:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 959,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 248 },
     _consuming: false,
     _dumped: false,
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 63,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 63\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [Circular],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     text:
      '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
  request:
   Request {
     _events: [Object: null prototype] { abort: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     _enableHttp2: false,
     _agent: false,
     _formData: null,
     method: 'POST',
     url: 'http://localhost:8888/users/',
     _header:
      { 'user-agent': 'node-superagent/5.0.5',
        'content-type': 'application/json' },
     header:
      { 'User-Agent': 'node-superagent/5.0.5',
        'Content-Type': 'application/json' },
     writable: true,
     _redirects: 0,
     _maxRedirects: 5,
     cookies: '',
     qs: {},
     _query: [],
     qsRaw: [],
     _redirectList: [],
     _streamRequest: false,
     _data:
      '{"email":"e@ma.il","password":"password","profile":{"name":{}}}',
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 63,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 63\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [IncomingMessage],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     protocol: 'http:',
     host: 'localhost:8888',
     _endCalled: true,
     _callback: [Function],
     _fullfilledPromise: Promise { <rejected> [Error] },
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [ClientRequest],
        text:
         '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
     _resBuffered: true,
     response: [Circular],
     called: true },
  req:
   ClientRequest {
     _events:
      [Object: null prototype] {
        drain: [Function],
        error: [Function],
        prefinish: [Function: requestOnPrefinish] },
     _eventsCount: 3,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: true,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: false,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: 63,
     _hasBody: true,
     _trailer: '',
     finished: true,
     _headerSent: true,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 959,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 248 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 959,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 248 },
     _header:
      'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 63\r\nConnection: close\r\n\r\n',
     _onPendingData: [Function: noopPendingOutput],
     agent:
      Agent {
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object],
        requests: {},
        sockets: {},
        freeSockets: {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256 },
     socketPath: undefined,
     timeout: undefined,
     method: 'POST',
     path: '/users/',
     _ended: true,
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [Circular],
        text:
         '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
     aborted: undefined,
     timeoutCb: null,
     upgradeOrConnect: false,
     parser: null,
     maxHeadersCount: null,
     [Symbol(isCorked)]: false,
     [Symbol(outHeadersKey)]:
      [Object: null prototype] {
        host: [Array],
        'accept-encoding': [Array],
        'user-agent': [Array],
        'content-type': [Array],
        'content-length': [Array] } },
  text:
   '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n',
  body: {},
  files: undefined,
  buffered: true,
  headers:
   { 'x-powered-by': 'Express',
     'content-security-policy': 'default-src \'none\'',
     'x-content-type-options': 'nosniff',
     'content-type': 'text/html; charset=utf-8',
     'content-length': '146',
     date: 'Fri, 21 Jun 2019 21:53:22 GMT',
     connection: 'close' },
  header:
   { 'x-powered-by': 'Express',
     'content-security-policy': 'default-src \'none\'',
     'x-content-type-options': 'nosniff',
     'content-type': 'text/html; charset=utf-8',
     'content-length': '146',
     date: 'Fri, 21 Jun 2019 21:53:22 GMT',
     connection: 'close' },
  statusCode: 404,
  status: 404,
  statusType: 4,
  info: false,
  ok: false,
  redirect: false,
  clientError: true,
  serverError: false,
  error:
   { Error: cannot POST /users/ (404)
       at Response.toError (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:98:13)
       at ResponseBase._setStatusProperties (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/response-base.js:119:48)
       at new Response (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:44:8)
       at Request._emitResponse (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:909:18)
       at IncomingMessage.<anonymous> (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:1105:42)
       at IncomingMessage.emit (events.js:194:15)
       at endReadableNT (_stream_readable.js:1125:12)
       at process._tickCallback (internal/process/next_tick.js:63:19)
     status: 404,
     text:
      '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n',
     method: 'POST',
     path: '/users/' },
  created: false,
  accepted: false,
  noContent: false,
  badRequest: false,
  unauthorized: false,
  notAcceptable: false,
  forbidden: false,
  notFound: true,
  unprocessableEntity: false,
  type: 'text/html',
  charset: 'utf-8',
  links: {},
  setEncoding: [Function: bound ],
  redirects: [],
  pipe: [Function] }
404








F---| superagent(method, http://host:portpath) ->POST, http://localhost:8888/users/ || ES client.host -> http://localhost:9200 |
...Response {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  res:
   IncomingMessage {
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: true,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: true,
        decoder: [StringDecoder],
        encoding: 'utf8' },
     readable: false,
     _events:
      [Object: null prototype] {
        end: [Array],
        data: [Array],
        error: [Array],
        close: [Function: bound emit] },
     _eventsCount: 4,
     _maxListeners: undefined,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 1005,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 264 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 1005,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 264 },
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     httpVersion: '1.1',
     complete: true,
     headers:
      { 'x-powered-by': 'Express',
        'content-security-policy': 'default-src \'none\'',
        'x-content-type-options': 'nosniff',
        'content-type': 'text/html; charset=utf-8',
        'content-length': '146',
        date: 'Fri, 21 Jun 2019 21:53:22 GMT',
        connection: 'close' },
     rawHeaders:
      [ 'X-Powered-By',
        'Express',
        'Content-Security-Policy',
        'default-src \'none\'',
        'X-Content-Type-Options',
        'nosniff',
        'Content-Type',
        'text/html; charset=utf-8',
        'Content-Length',
        '146',
        'Date',
        'Fri, 21 Jun 2019 21:53:22 GMT',
        'Connection',
        'close' ],
     trailers: {},
     rawTrailers: [],
     aborted: false,
     upgrade: false,
     url: '',
     method: null,
     statusCode: 404,
     statusMessage: 'Not Found',
     client:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 1005,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 264 },
     _consuming: false,
     _dumped: false,
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 79,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 79\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [Circular],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     text:
      '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
  request:
   Request {
     _events: [Object: null prototype] { abort: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     _enableHttp2: false,
     _agent: false,
     _formData: null,
     method: 'POST',
     url: 'http://localhost:8888/users/',
     _header:
      { 'user-agent': 'node-superagent/5.0.5',
        'content-type': 'application/json' },
     header:
      { 'User-Agent': 'node-superagent/5.0.5',
        'Content-Type': 'application/json' },
     writable: true,
     _redirects: 0,
     _maxRedirects: 5,
     cookies: '',
     qs: {},
     _query: [],
     qsRaw: [],
     _redirectList: [],
     _streamRequest: false,
     _data:
      '{"email":"e@ma.il","password":"password","profile":{"name":{"first":"Daniel"}}}',
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 79,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 79\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [IncomingMessage],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     protocol: 'http:',
     host: 'localhost:8888',
     _endCalled: true,
     _callback: [Function],
     _fullfilledPromise: Promise { <rejected> [Error] },
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [ClientRequest],
        text:
         '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
     _resBuffered: true,
     response: [Circular],
     called: true },
  req:
   ClientRequest {
     _events:
      [Object: null prototype] {
        drain: [Function],
        error: [Function],
        prefinish: [Function: requestOnPrefinish] },
     _eventsCount: 3,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: true,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: false,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: 79,
     _hasBody: true,
     _trailer: '',
     finished: true,
     _headerSent: true,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 1005,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 264 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 1005,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 264 },
     _header:
      'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 79\r\nConnection: close\r\n\r\n',
     _onPendingData: [Function: noopPendingOutput],
     agent:
      Agent {
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object],
        requests: {},
        sockets: {},
        freeSockets: {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256 },
     socketPath: undefined,
     timeout: undefined,
     method: 'POST',
     path: '/users/',
     _ended: true,
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [Circular],
        text:
         '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
     aborted: undefined,
     timeoutCb: null,
     upgradeOrConnect: false,
     parser: null,
     maxHeadersCount: null,
     [Symbol(isCorked)]: false,
     [Symbol(outHeadersKey)]:
      [Object: null prototype] {
        host: [Array],
        'accept-encoding': [Array],
        'user-agent': [Array],
        'content-type': [Array],
        'content-length': [Array] } },
  text:
   '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n',
  body: {},
  files: undefined,
  buffered: true,
  headers:
   { 'x-powered-by': 'Express',
     'content-security-policy': 'default-src \'none\'',
     'x-content-type-options': 'nosniff',
     'content-type': 'text/html; charset=utf-8',
     'content-length': '146',
     date: 'Fri, 21 Jun 2019 21:53:22 GMT',
     connection: 'close' },
  header:
   { 'x-powered-by': 'Express',
     'content-security-policy': 'default-src \'none\'',
     'x-content-type-options': 'nosniff',
     'content-type': 'text/html; charset=utf-8',
     'content-length': '146',
     date: 'Fri, 21 Jun 2019 21:53:22 GMT',
     connection: 'close' },
  statusCode: 404,
  status: 404,
  statusType: 4,
  info: false,
  ok: false,
  redirect: false,
  clientError: true,
  serverError: false,
  error:
   { Error: cannot POST /users/ (404)
       at Response.toError (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:98:13)
       at ResponseBase._setStatusProperties (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/response-base.js:119:48)
       at new Response (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:44:8)
       at Request._emitResponse (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:909:18)
       at IncomingMessage.<anonymous> (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:1105:42)
       at IncomingMessage.emit (events.js:194:15)
       at endReadableNT (_stream_readable.js:1125:12)
       at process._tickCallback (internal/process/next_tick.js:63:19)
     status: 404,
     text:
      '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n',
     method: 'POST',
     path: '/users/' },
  created: false,
  accepted: false,
  noContent: false,
  badRequest: false,
  unauthorized: false,
  notAcceptable: false,
  forbidden: false,
  notFound: true,
  unprocessableEntity: false,
  type: 'text/html',
  charset: 'utf-8',
  links: {},
  setEncoding: [Function: bound ],
  redirects: [],
  pipe: [Function] }
404








F---| superagent(method, http://host:portpath) ->POST, http://localhost:8888/users/ || ES client.host -> http://localhost:9200 |
...Response {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  res:
   IncomingMessage {
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: true,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: true,
        decoder: [StringDecoder],
        encoding: 'utf8' },
     readable: false,
     _events:
      [Object: null prototype] {
        end: [Array],
        data: [Array],
        error: [Array],
        close: [Function: bound emit] },
     _eventsCount: 4,
     _maxListeners: undefined,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 1051,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 250 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 1051,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 250 },
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     httpVersion: '1.1',
     complete: true,
     headers:
      { 'x-powered-by': 'Express',
        'content-security-policy': 'default-src \'none\'',
        'x-content-type-options': 'nosniff',
        'content-type': 'text/html; charset=utf-8',
        'content-length': '146',
        date: 'Fri, 21 Jun 2019 21:53:22 GMT',
        connection: 'close' },
     rawHeaders:
      [ 'X-Powered-By',
        'Express',
        'Content-Security-Policy',
        'default-src \'none\'',
        'X-Content-Type-Options',
        'nosniff',
        'Content-Type',
        'text/html; charset=utf-8',
        'Content-Length',
        '146',
        'Date',
        'Fri, 21 Jun 2019 21:53:22 GMT',
        'Connection',
        'close' ],
     trailers: {},
     rawTrailers: [],
     aborted: false,
     upgrade: false,
     url: '',
     method: null,
     statusCode: 404,
     statusMessage: 'Not Found',
     client:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 1051,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 250 },
     _consuming: false,
     _dumped: false,
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 65,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 65\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [Circular],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     text:
      '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
  request:
   Request {
     _events: [Object: null prototype] { abort: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     _enableHttp2: false,
     _agent: false,
     _formData: null,
     method: 'POST',
     url: 'http://localhost:8888/users/',
     _header:
      { 'user-agent': 'node-superagent/5.0.5',
        'content-type': 'application/json' },
     header:
      { 'User-Agent': 'node-superagent/5.0.5',
        'Content-Type': 'application/json' },
     writable: true,
     _redirects: 0,
     _maxRedirects: 5,
     cookies: '',
     qs: {},
     _query: [],
     qsRaw: [],
     _redirectList: [],
     _streamRequest: false,
     _data:
      '{"email":"e@ma.il","password":"password","profile":{"bio":"bio"}}',
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 65,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 65\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [IncomingMessage],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     protocol: 'http:',
     host: 'localhost:8888',
     _endCalled: true,
     _callback: [Function],
     _fullfilledPromise: Promise { <rejected> [Error] },
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [ClientRequest],
        text:
         '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
     _resBuffered: true,
     response: [Circular],
     called: true },
  req:
   ClientRequest {
     _events:
      [Object: null prototype] {
        drain: [Function],
        error: [Function],
        prefinish: [Function: requestOnPrefinish] },
     _eventsCount: 3,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: true,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: false,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: 65,
     _hasBody: true,
     _trailer: '',
     finished: true,
     _headerSent: true,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 1051,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 250 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 1051,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 250 },
     _header:
      'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 65\r\nConnection: close\r\n\r\n',
     _onPendingData: [Function: noopPendingOutput],
     agent:
      Agent {
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object],
        requests: {},
        sockets: {},
        freeSockets: {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256 },
     socketPath: undefined,
     timeout: undefined,
     method: 'POST',
     path: '/users/',
     _ended: true,
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [Circular],
        text:
         '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
     aborted: undefined,
     timeoutCb: null,
     upgradeOrConnect: false,
     parser: null,
     maxHeadersCount: null,
     [Symbol(isCorked)]: false,
     [Symbol(outHeadersKey)]:
      [Object: null prototype] {
        host: [Array],
        'accept-encoding': [Array],
        'user-agent': [Array],
        'content-type': [Array],
        'content-length': [Array] } },
  text:
   '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n',
  body: {},
  files: undefined,
  buffered: true,
  headers:
   { 'x-powered-by': 'Express',
     'content-security-policy': 'default-src \'none\'',
     'x-content-type-options': 'nosniff',
     'content-type': 'text/html; charset=utf-8',
     'content-length': '146',
     date: 'Fri, 21 Jun 2019 21:53:22 GMT',
     connection: 'close' },
  header:
   { 'x-powered-by': 'Express',
     'content-security-policy': 'default-src \'none\'',
     'x-content-type-options': 'nosniff',
     'content-type': 'text/html; charset=utf-8',
     'content-length': '146',
     date: 'Fri, 21 Jun 2019 21:53:22 GMT',
     connection: 'close' },
  statusCode: 404,
  status: 404,
  statusType: 4,
  info: false,
  ok: false,
  redirect: false,
  clientError: true,
  serverError: false,
  error:
   { Error: cannot POST /users/ (404)
       at Response.toError (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:98:13)
       at ResponseBase._setStatusProperties (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/response-base.js:119:48)
       at new Response (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:44:8)
       at Request._emitResponse (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:909:18)
       at IncomingMessage.<anonymous> (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:1105:42)
       at IncomingMessage.emit (events.js:194:15)
       at endReadableNT (_stream_readable.js:1125:12)
       at process._tickCallback (internal/process/next_tick.js:63:19)
     status: 404,
     text:
      '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n',
     method: 'POST',
     path: '/users/' },
  created: false,
  accepted: false,
  noContent: false,
  badRequest: false,
  unauthorized: false,
  notAcceptable: false,
  forbidden: false,
  notFound: true,
  unprocessableEntity: false,
  type: 'text/html',
  charset: 'utf-8',
  links: {},
  setEncoding: [Function: bound ],
  redirects: [],
  pipe: [Function] }
404








F---| superagent(method, http://host:portpath) ->POST, http://localhost:8888/users/ || ES client.host -> http://localhost:9200 |
...Response {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  res:
   IncomingMessage {
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: true,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: true,
        decoder: [StringDecoder],
        encoding: 'utf8' },
     readable: false,
     _events:
      [Object: null prototype] {
        end: [Array],
        data: [Array],
        error: [Array],
        close: [Function: bound emit] },
     _eventsCount: 4,
     _maxListeners: undefined,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 1097,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 258 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 1097,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 258 },
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     httpVersion: '1.1',
     complete: true,
     headers:
      { 'x-powered-by': 'Express',
        'content-security-policy': 'default-src \'none\'',
        'x-content-type-options': 'nosniff',
        'content-type': 'text/html; charset=utf-8',
        'content-length': '146',
        date: 'Fri, 21 Jun 2019 21:53:22 GMT',
        connection: 'close' },
     rawHeaders:
      [ 'X-Powered-By',
        'Express',
        'Content-Security-Policy',
        'default-src \'none\'',
        'X-Content-Type-Options',
        'nosniff',
        'Content-Type',
        'text/html; charset=utf-8',
        'Content-Length',
        '146',
        'Date',
        'Fri, 21 Jun 2019 21:53:22 GMT',
        'Connection',
        'close' ],
     trailers: {},
     rawTrailers: [],
     aborted: false,
     upgrade: false,
     url: '',
     method: null,
     statusCode: 404,
     statusMessage: 'Not Found',
     client:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 1097,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 258 },
     _consuming: false,
     _dumped: false,
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 73,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 73\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [Circular],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     text:
      '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
  request:
   Request {
     _events: [Object: null prototype] { abort: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     _enableHttp2: false,
     _agent: false,
     _formData: null,
     method: 'POST',
     url: 'http://localhost:8888/users/',
     _header:
      { 'user-agent': 'node-superagent/5.0.5',
        'content-type': 'application/json' },
     header:
      { 'User-Agent': 'node-superagent/5.0.5',
        'Content-Type': 'application/json' },
     writable: true,
     _redirects: 0,
     _maxRedirects: 5,
     cookies: '',
     qs: {},
     _query: [],
     qsRaw: [],
     _redirectList: [],
     _streamRequest: false,
     _data:
      '{"email":"e@ma.il","password":"password","profile":{"summary":"summary"}}',
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 73,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 73\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [IncomingMessage],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     protocol: 'http:',
     host: 'localhost:8888',
     _endCalled: true,
     _callback: [Function],
     _fullfilledPromise: Promise { <rejected> [Error] },
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [ClientRequest],
        text:
         '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
     _resBuffered: true,
     response: [Circular],
     called: true },
  req:
   ClientRequest {
     _events:
      [Object: null prototype] {
        drain: [Function],
        error: [Function],
        prefinish: [Function: requestOnPrefinish] },
     _eventsCount: 3,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: true,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: false,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: 73,
     _hasBody: true,
     _trailer: '',
     finished: true,
     _headerSent: true,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 1097,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 258 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 1097,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 390,
        [Symbol(kBytesWritten)]: 258 },
     _header:
      'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 73\r\nConnection: close\r\n\r\n',
     _onPendingData: [Function: noopPendingOutput],
     agent:
      Agent {
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object],
        requests: {},
        sockets: {},
        freeSockets: {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256 },
     socketPath: undefined,
     timeout: undefined,
     method: 'POST',
     path: '/users/',
     _ended: true,
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 404,
        statusMessage: 'Not Found',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [Circular],
        text:
         '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n' },
     aborted: undefined,
     timeoutCb: null,
     upgradeOrConnect: false,
     parser: null,
     maxHeadersCount: null,
     [Symbol(isCorked)]: false,
     [Symbol(outHeadersKey)]:
      [Object: null prototype] {
        host: [Array],
        'accept-encoding': [Array],
        'user-agent': [Array],
        'content-type': [Array],
        'content-length': [Array] } },
  text:
   '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n',
  body: {},
  files: undefined,
  buffered: true,
  headers:
   { 'x-powered-by': 'Express',
     'content-security-policy': 'default-src \'none\'',
     'x-content-type-options': 'nosniff',
     'content-type': 'text/html; charset=utf-8',
     'content-length': '146',
     date: 'Fri, 21 Jun 2019 21:53:22 GMT',
     connection: 'close' },
  header:
   { 'x-powered-by': 'Express',
     'content-security-policy': 'default-src \'none\'',
     'x-content-type-options': 'nosniff',
     'content-type': 'text/html; charset=utf-8',
     'content-length': '146',
     date: 'Fri, 21 Jun 2019 21:53:22 GMT',
     connection: 'close' },
  statusCode: 404,
  status: 404,
  statusType: 4,
  info: false,
  ok: false,
  redirect: false,
  clientError: true,
  serverError: false,
  error:
   { Error: cannot POST /users/ (404)
       at Response.toError (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:98:13)
       at ResponseBase._setStatusProperties (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/response-base.js:119:48)
       at new Response (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:44:8)
       at Request._emitResponse (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:909:18)
       at IncomingMessage.<anonymous> (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:1105:42)
       at IncomingMessage.emit (events.js:194:15)
       at endReadableNT (_stream_readable.js:1125:12)
       at process._tickCallback (internal/process/next_tick.js:63:19)
     status: 404,
     text:
      '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>Cannot POST /users/</pre>\n</body>\n</html>\n',
     method: 'POST',
     path: '/users/' },
  created: false,
  accepted: false,
  noContent: false,
  badRequest: false,
  unauthorized: false,
  notAcceptable: false,
  forbidden: false,
  notFound: true,
  unprocessableEntity: false,
  type: 'text/html',
  charset: 'utf-8',
  links: {},
  setEncoding: [Function: bound ],
  redirects: [],
  pipe: [Function] }
404
F---

Failures:

1) Scenario: Bad Request Payload # spec/cucumber/features/users/create/main.feature:51
   ✔ When the client creates a POST request to /users/ # spec/cucumber/steps/index.js:73
   ✔ And attaches a Create User payload which is missing the email field # spec/cucumber/steps/index.js:128
   ✔ And sends the request # spec/cucumber/steps/index.js:215
   ✖ Then our API should respond with a 400 HTTP status code # spec/cucumber/steps/index.js:230
       AssertionError [ERR_ASSERTION]: 404 == '400'
           at World.equal (/Users/justin/Core/Dev/Pub/hobnob/spec/cucumber/steps/index.js:233:10)
   - And the payload of the response should be a JSON object # spec/cucumber/steps/index.js:237
   - And contains a message property which says "The '.email' field is missing" # spec/cucumber/steps/index.js:265

2) Scenario: Bad Request Payload # spec/cucumber/features/users/create/main.feature:52
   ✔ When the client creates a POST request to /users/ # spec/cucumber/steps/index.js:73
   ✔ And attaches a Create User payload which is missing the password field # spec/cucumber/steps/index.js:128
   ✔ And sends the request # spec/cucumber/steps/index.js:215
   ✖ Then our API should respond with a 400 HTTP status code # spec/cucumber/steps/index.js:230
       AssertionError [ERR_ASSERTION]: 404 == '400'
           at World.equal (/Users/justin/Core/Dev/Pub/hobnob/spec/cucumber/steps/index.js:233:10)
   - And the payload of the response should be a JSON object # spec/cucumber/steps/index.js:237
   - And contains a message property which says "The '.password' field is missing" # spec/cucumber/steps/index.js:265

3) Scenario: Request Payload with Properties of Unsupported Type # spec/cucumber/features/users/create/main.feature:68
   ✔ When the client creates a POST request to /users/ # spec/cucumber/steps/index.js:73
   ✔ And attaches a Create User payload where the email field is not a string # spec/cucumber/steps/index.js:152
   ✔ And sends the request # spec/cucumber/steps/index.js:215
   ✖ Then our API should respond with a 400 HTTP status code # spec/cucumber/steps/index.js:230
       AssertionError [ERR_ASSERTION]: 404 == '400'
           at World.equal (/Users/justin/Core/Dev/Pub/hobnob/spec/cucumber/steps/index.js:233:10)
   - And the payload of the response should be a JSON object # spec/cucumber/steps/index.js:237
   - And contains a message property which says "The '.email' field must be of type string" # spec/cucumber/steps/index.js:265

4) Scenario: Request Payload with Properties of Unsupported Type # spec/cucumber/features/users/create/main.feature:69
   ✔ When the client creates a POST request to /users/ # spec/cucumber/steps/index.js:73
   ✔ And attaches a Create User payload where the password field is not a string # spec/cucumber/steps/index.js:152
   ✔ And sends the request # spec/cucumber/steps/index.js:215
   ✖ Then our API should respond with a 400 HTTP status code # spec/cucumber/steps/index.js:230
       AssertionError [ERR_ASSERTION]: 404 == '400'
           at World.equal (/Users/justin/Core/Dev/Pub/hobnob/spec/cucumber/steps/index.js:233:10)
   - And the payload of the response should be a JSON object # spec/cucumber/steps/index.js:237
   - And contains a message property which says "The '.password' field must be of type string" # spec/cucumber/steps/index.js:265

5) Scenario: Request Payload with invalid email format # spec/cucumber/features/users/create/main.feature:86
   ✔ When the client creates a POST request to /users/ # spec/cucumber/steps/index.js:73
   ✔ And attaches a Create User payload where the email field is exactly a238juqy2 # spec/cucumber/steps/index.js:197
   ✔ And sends the request # spec/cucumber/steps/index.js:215
   ✖ Then our API should respond with a 400 HTTP status code # spec/cucumber/steps/index.js:230
       AssertionError [ERR_ASSERTION]: 404 == '400'
           at World.equal (/Users/justin/Core/Dev/Pub/hobnob/spec/cucumber/steps/index.js:233:10)
   - And the payload of the response should be a JSON object # spec/cucumber/steps/index.js:237
   - And contains a message property which says "The '.email' field must be a valid email" # spec/cucumber/steps/index.js:265

6) Scenario: Request Payload with invalid email format # spec/cucumber/features/users/create/main.feature:87
   ✔ When the client creates a POST request to /users/ # spec/cucumber/steps/index.js:73
   ✔ And attaches a Create User payload where the email field is exactly a@1.2.3.4 # spec/cucumber/steps/index.js:197
   ✔ And sends the request # spec/cucumber/steps/index.js:215
   ✖ Then our API should respond with a 400 HTTP status code # spec/cucumber/steps/index.js:230
       AssertionError [ERR_ASSERTION]: 404 == '400'
           at World.equal (/Users/justin/Core/Dev/Pub/hobnob/spec/cucumber/steps/index.js:233:10)
   - And the payload of the response should be a JSON object # spec/cucumber/steps/index.js:237
   - And contains a message property which says "The '.email' field must be a valid email" # spec/cucumber/steps/index.js:265

7) Scenario: Request Payload with invalid email format # spec/cucumber/features/users/create/main.feature:88
   ✔ When the client creates a POST request to /users/ # spec/cucumber/steps/index.js:73
   ✔ And attaches a Create User payload where the email field is exactly a,b,c@!! # spec/cucumber/steps/index.js:197
   ✔ And sends the request # spec/cucumber/steps/index.js:215
   ✖ Then our API should respond with a 400 HTTP status code # spec/cucumber/steps/index.js:230
       AssertionError [ERR_ASSERTION]: 404 == '400'
           at World.equal (/Users/justin/Core/Dev/Pub/hobnob/spec/cucumber/steps/index.js:233:10)
   - And the payload of the response should be a JSON object # spec/cucumber/steps/index.js:237
   - And contains a message property which says "The '.email' field must be a valid email" # spec/cucumber/steps/index.js:265

8) Scenario: Minimal Valid User # spec/cucumber/features/users/create/main.feature:91
   ✔ When the client creates a POST request to /users/ # spec/cucumber/steps/index.js:73
   ✔ And attaches a valid Create User payload # spec/cucumber/steps/index.js:118
   ✔ And sends the request # spec/cucumber/steps/index.js:215
   ✖ Then our API should respond with a 201 HTTP status code # spec/cucumber/steps/index.js:230
       AssertionError [ERR_ASSERTION]: 404 == '201'
           at World.equal (/Users/justin/Core/Dev/Pub/hobnob/spec/cucumber/steps/index.js:233:10)
   - And the payload of the response should be a string # spec/cucumber/steps/index.js:237
   - And the payload object should be added to the database, grouped under the "user" type # spec/cucumber/steps/index.js:275
   - And the newly-created user should be deleted # spec/cucumber/steps/index.js:296

9) Scenario: Invalid Profile # spec/cucumber/features/users/create/main.feature:118
   ✔ When the client creates a POST request to /users/ # spec/cucumber/steps/index.js:73
   ✔ And attaches {"email":"e@ma.il","password":"abc","profile":{"foo":"bar"}} as the payload # spec/cucumber/steps/index.js:84
   ✔ And sends the request # spec/cucumber/steps/index.js:215
   ✖ Then our API should respond with a 400 HTTP status code # spec/cucumber/steps/index.js:230
       AssertionError [ERR_ASSERTION]: 404 == '400'
           at World.equal (/Users/justin/Core/Dev/Pub/hobnob/spec/cucumber/steps/index.js:233:10)
   - And the payload of the response should be a JSON object # spec/cucumber/steps/index.js:237
   - And contains a message property which says "The '.profile' object does not support the field 'foo'" # spec/cucumber/steps/index.js:265

10) Scenario: Invalid Profile # spec/cucumber/features/users/create/main.feature:119
    ✔ When the client creates a POST request to /users/ # spec/cucumber/steps/index.js:73
    ✔ And attaches {"email":"e@ma.il","password":"abc","profile":{"name":{"first":"Jane","a":"b"}}} as the payload # spec/cucumber/steps/index.js:84
    ✔ And sends the request # spec/cucumber/steps/index.js:215
    ✖ Then our API should respond with a 400 HTTP status code # spec/cucumber/steps/index.js:230
        AssertionError [ERR_ASSERTION]: 404 == '400'
            at World.equal (/Users/justin/Core/Dev/Pub/hobnob/spec/cucumber/steps/index.js:233:10)
    - And the payload of the response should be a JSON object # spec/cucumber/steps/index.js:237
    - And contains a message property which says "The '.profile.name' object does not support the field 'a'" # spec/cucumber/steps/index.js:265

11) Scenario: Invalid Profile # spec/cucumber/features/users/create/main.feature:120
    ✔ When the client creates a POST request to /users/ # spec/cucumber/steps/index.js:73
    ✔ And attaches {"email":"e@ma.il","password":"abc","profile":{"summary":0}} as the payload # spec/cucumber/steps/index.js:84
    ✔ And sends the request # spec/cucumber/steps/index.js:215
    ✖ Then our API should respond with a 400 HTTP status code # spec/cucumber/steps/index.js:230
        AssertionError [ERR_ASSERTION]: 404 == '400'
            at World.equal (/Users/justin/Core/Dev/Pub/hobnob/spec/cucumber/steps/index.js:233:10)
    - And the payload of the response should be a JSON object # spec/cucumber/steps/index.js:237
    - And contains a message property which says "The '.profile.summary' field must be of type string" # spec/cucumber/steps/index.js:265

12) Scenario: Invalid Profile # spec/cucumber/features/users/create/main.feature:121
    ✔ When the client creates a POST request to /users/ # spec/cucumber/steps/index.js:73
    ✔ And attaches {"email":"e@ma.il","password":"abc","profile":{"bio":0}} as the payload # spec/cucumber/steps/index.js:84
    ✔ And sends the request # spec/cucumber/steps/index.js:215
    ✖ Then our API should respond with a 400 HTTP status code # spec/cucumber/steps/index.js:230
        AssertionError [ERR_ASSERTION]: 404 == '400'
            at World.equal (/Users/justin/Core/Dev/Pub/hobnob/spec/cucumber/steps/index.js:233:10)
    - And the payload of the response should be a JSON object # spec/cucumber/steps/index.js:237
    - And contains a message property which says "The '.profile.bio' field must be of type string" # spec/cucumber/steps/index.js:265

13) Scenario: Valid Profile # spec/cucumber/features/users/create/main.feature:139
    ✔ When the client creates a POST request to /users/ # spec/cucumber/steps/index.js:73
    ✔ And attaches {"email":"e@ma.il","password":"password","profile":{}} as the payload # spec/cucumber/steps/index.js:84
    ✔ And sends the request # spec/cucumber/steps/index.js:215
    ✖ Then our API should respond with a 201 HTTP status code # spec/cucumber/steps/index.js:230
        AssertionError [ERR_ASSERTION]: 404 == '201'
            at World.equal (/Users/justin/Core/Dev/Pub/hobnob/spec/cucumber/steps/index.js:233:10)
    - And the payload of the response should be a string # spec/cucumber/steps/index.js:237
    - And the payload object should be added to the database, grouped under the "user" type # spec/cucumber/steps/index.js:275
    - And the newly-created user should be deleted # spec/cucumber/steps/index.js:296

14) Scenario: Valid Profile # spec/cucumber/features/users/create/main.feature:140
    ✔ When the client creates a POST request to /users/ # spec/cucumber/steps/index.js:73
    ✔ And attaches {"email":"e@ma.il","password":"password","profile":{"name":{}}} as the payload # spec/cucumber/steps/index.js:84
    ✔ And sends the request # spec/cucumber/steps/index.js:215
    ✖ Then our API should respond with a 201 HTTP status code # spec/cucumber/steps/index.js:230
        AssertionError [ERR_ASSERTION]: 404 == '201'
            at World.equal (/Users/justin/Core/Dev/Pub/hobnob/spec/cucumber/steps/index.js:233:10)
    - And the payload of the response should be a string # spec/cucumber/steps/index.js:237
    - And the payload object should be added to the database, grouped under the "user" type # spec/cucumber/steps/index.js:275
    - And the newly-created user should be deleted # spec/cucumber/steps/index.js:296

15) Scenario: Valid Profile # spec/cucumber/features/users/create/main.feature:141
    ✔ When the client creates a POST request to /users/ # spec/cucumber/steps/index.js:73
    ✔ And attaches {"email":"e@ma.il","password":"password","profile":{"name":{"first":"Daniel"}}} as the payload # spec/cucumber/steps/index.js:84
    ✔ And sends the request # spec/cucumber/steps/index.js:215
    ✖ Then our API should respond with a 201 HTTP status code # spec/cucumber/steps/index.js:230
        AssertionError [ERR_ASSERTION]: 404 == '201'
            at World.equal (/Users/justin/Core/Dev/Pub/hobnob/spec/cucumber/steps/index.js:233:10)
    - And the payload of the response should be a string # spec/cucumber/steps/index.js:237
    - And the payload object should be added to the database, grouped under the "user" type # spec/cucumber/steps/index.js:275
    - And the newly-created user should be deleted # spec/cucumber/steps/index.js:296

16) Scenario: Valid Profile # spec/cucumber/features/users/create/main.feature:142
    ✔ When the client creates a POST request to /users/ # spec/cucumber/steps/index.js:73
    ✔ And attaches {"email":"e@ma.il","password":"password","profile":{"bio":"bio"}} as the payload # spec/cucumber/steps/index.js:84
    ✔ And sends the request # spec/cucumber/steps/index.js:215
    ✖ Then our API should respond with a 201 HTTP status code # spec/cucumber/steps/index.js:230
        AssertionError [ERR_ASSERTION]: 404 == '201'
            at World.equal (/Users/justin/Core/Dev/Pub/hobnob/spec/cucumber/steps/index.js:233:10)
    - And the payload of the response should be a string # spec/cucumber/steps/index.js:237
    - And the payload object should be added to the database, grouped under the "user" type # spec/cucumber/steps/index.js:275
    - And the newly-created user should be deleted # spec/cucumber/steps/index.js:296

17) Scenario: Valid Profile # spec/cucumber/features/users/create/main.feature:143
    ✔ When the client creates a POST request to /users/ # spec/cucumber/steps/index.js:73
    ✔ And attaches {"email":"e@ma.il","password":"password","profile":{"summary":"summary"}} as the payload # spec/cucumber/steps/index.js:84
    ✔ And sends the request # spec/cucumber/steps/index.js:215
    ✖ Then our API should respond with a 201 HTTP status code # spec/cucumber/steps/index.js:230
        AssertionError [ERR_ASSERTION]: 404 == '201'
            at World.equal (/Users/justin/Core/Dev/Pub/hobnob/spec/cucumber/steps/index.js:233:10)
    - And the payload of the response should be a string # spec/cucumber/steps/index.js:237
    - And the payload object should be added to the database, grouped under the "user" type # spec/cucumber/steps/index.js:275
    - And the newly-created user should be deleted # spec/cucumber/steps/index.js:296

23 scenarios (17 failed, 6 passed)
147 steps (17 failed, 40 skipped, 90 passed)
0m00.480s

GitHub: [create-user/refactor-modules !?]
