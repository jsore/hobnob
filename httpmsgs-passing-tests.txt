| superagent(method, http://host:portpath) ->POST, http://localhost:8888/users/ || ES client.host -> http://localhost:9200 |
....Response {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  res:
   IncomingMessage {
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: true,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: true,
        decoder: [StringDecoder],
        encoding: 'utf8' },
     readable: false,
     _events:
      [Object: null prototype] {
        end: [Array],
        data: [Array],
        error: [Array],
        close: [Function: bound emit] },
     _eventsCount: 4,
     _maxListeners: undefined,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 100,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 330,
        [Symbol(kBytesWritten)]: 223 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 100,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 330,
        [Symbol(kBytesWritten)]: 223 },
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     httpVersion: '1.1',
     complete: true,
     headers:
      { 'x-powered-by': 'Express',
        'content-type': 'application/json; charset=utf-8',
        'content-length': '113',
        etag: 'W/"71-0uwTpFFeCYb2/bgQQelVu4XuT3k"',
        date: 'Fri, 21 Jun 2019 21:53:21 GMT',
        connection: 'close' },
     rawHeaders:
      [ 'X-Powered-By',
        'Express',
        'Content-Type',
        'application/json; charset=utf-8',
        'Content-Length',
        '113',
        'ETag',
        'W/"71-0uwTpFFeCYb2/bgQQelVu4XuT3k"',
        'Date',
        'Fri, 21 Jun 2019 21:53:21 GMT',
        'Connection',
        'close' ],
     trailers: {},
     rawTrailers: [],
     aborted: false,
     upgrade: false,
     url: '',
     method: null,
     statusCode: 400,
     statusMessage: 'Bad Request',
     client:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 100,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 330,
        [Symbol(kBytesWritten)]: 223 },
     _consuming: false,
     _dumped: false,
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 70,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Length: 70\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [Circular],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     text:
      '{"message":"The \\"Content-Type\\" header must be set for POST, PATCH, and PUT requests with a non-empty payload."}' },
  request:
   Request {
     _events: [Object: null prototype] { abort: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     _enableHttp2: false,
     _agent: false,
     _formData: null,
     method: 'POST',
     url: 'http://localhost:8888/users/',
     _header: { 'user-agent': 'node-superagent/5.0.5' },
     header: { 'User-Agent': 'node-superagent/5.0.5' },
     writable: true,
     _redirects: 0,
     _maxRedirects: 5,
     cookies: '',
     qs: {},
     _query: [],
     qsRaw: [],
     _redirectList: [],
     _streamRequest: false,
     _data:
      '<?xml version="1.0" encoding="UTF-8" ?><email>justin@jsore.com</email>',
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 70,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Length: 70\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [IncomingMessage],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     protocol: 'http:',
     host: 'localhost:8888',
     _endCalled: true,
     _callback: [Function],
     _fullfilledPromise: Promise { <rejected> [Error] },
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 400,
        statusMessage: 'Bad Request',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [ClientRequest],
        text:
         '{"message":"The \\"Content-Type\\" header must be set for POST, PATCH, and PUT requests with a non-empty payload."}' },
     _resBuffered: true,
     response: [Circular],
     called: true },
  req:
   ClientRequest {
     _events:
      [Object: null prototype] {
        drain: [Function],
        error: [Function],
        prefinish: [Function: requestOnPrefinish] },
     _eventsCount: 3,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: true,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: false,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: 70,
     _hasBody: true,
     _trailer: '',
     finished: true,
     _headerSent: true,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 100,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 330,
        [Symbol(kBytesWritten)]: 223 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 100,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 330,
        [Symbol(kBytesWritten)]: 223 },
     _header:
      'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Length: 70\r\nConnection: close\r\n\r\n',
     _onPendingData: [Function: noopPendingOutput],
     agent:
      Agent {
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object],
        requests: {},
        sockets: {},
        freeSockets: {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256 },
     socketPath: undefined,
     timeout: undefined,
     method: 'POST',
     path: '/users/',
     _ended: true,
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 400,
        statusMessage: 'Bad Request',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [Circular],
        text:
         '{"message":"The \\"Content-Type\\" header must be set for POST, PATCH, and PUT requests with a non-empty payload."}' },
     aborted: undefined,
     timeoutCb: null,
     upgradeOrConnect: false,
     parser: null,
     maxHeadersCount: null,
     [Symbol(isCorked)]: false,
     [Symbol(outHeadersKey)]:
      [Object: null prototype] {
        host: [Array],
        'accept-encoding': [Array],
        'user-agent': [Array],
        'content-length': [Array] } },
  text:
   '{"message":"The \\"Content-Type\\" header must be set for POST, PATCH, and PUT requests with a non-empty payload."}',
  body:
   { message:
      'The "Content-Type" header must be set for POST, PATCH, and PUT requests with a non-empty payload.' },
  files: undefined,
  buffered: true,
  headers:
   { 'x-powered-by': 'Express',
     'content-type': 'application/json; charset=utf-8',
     'content-length': '113',
     etag: 'W/"71-0uwTpFFeCYb2/bgQQelVu4XuT3k"',
     date: 'Fri, 21 Jun 2019 21:53:21 GMT',
     connection: 'close' },
  header:
   { 'x-powered-by': 'Express',
     'content-type': 'application/json; charset=utf-8',
     'content-length': '113',
     etag: 'W/"71-0uwTpFFeCYb2/bgQQelVu4XuT3k"',
     date: 'Fri, 21 Jun 2019 21:53:21 GMT',
     connection: 'close' },
  statusCode: 400,
  status: 400,
  statusType: 4,
  info: false,
  ok: false,
  redirect: false,
  clientError: true,
  serverError: false,
  error:
   { Error: cannot POST /users/ (400)
       at Response.toError (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:98:13)
       at ResponseBase._setStatusProperties (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/response-base.js:119:48)
       at new Response (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:44:8)
       at Request._emitResponse (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:909:18)
       at /Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:1105:42
       at IncomingMessage.<anonymous> (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/parsers/json.js:22:7)
       at IncomingMessage.emit (events.js:194:15)
       at endReadableNT (_stream_readable.js:1125:12)
       at process._tickCallback (internal/process/next_tick.js:63:19)
     status: 400,
     text:
      '{"message":"The \\"Content-Type\\" header must be set for POST, PATCH, and PUT requests with a non-empty payload."}',
     method: 'POST',
     path: '/users/' },
  created: false,
  accepted: false,
  noContent: false,
  badRequest: true,
  unauthorized: false,
  notAcceptable: false,
  forbidden: false,
  notFound: false,
  unprocessableEntity: false,
  type: 'application/json',
  charset: 'utf-8',
  links: {},
  setEncoding: [Function: bound ],
  redirects: [],
  pipe: [Function] }
400








...| superagent(method, http://host:portpath) ->PATCH, http://localhost:8888/users/ || ES client.host -> http://localhost:9200 |
....Response {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  res:
   IncomingMessage {
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: true,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: true,
        decoder: [StringDecoder],
        encoding: 'utf8' },
     readable: false,
     _events:
      [Object: null prototype] {
        end: [Array],
        data: [Array],
        error: [Array],
        close: [Function: bound emit] },
     _eventsCount: 4,
     _maxListeners: undefined,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 150,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 330,
        [Symbol(kBytesWritten)]: 224 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 150,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 330,
        [Symbol(kBytesWritten)]: 224 },
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     httpVersion: '1.1',
     complete: true,
     headers:
      { 'x-powered-by': 'Express',
        'content-type': 'application/json; charset=utf-8',
        'content-length': '113',
        etag: 'W/"71-0uwTpFFeCYb2/bgQQelVu4XuT3k"',
        date: 'Fri, 21 Jun 2019 21:53:21 GMT',
        connection: 'close' },
     rawHeaders:
      [ 'X-Powered-By',
        'Express',
        'Content-Type',
        'application/json; charset=utf-8',
        'Content-Length',
        '113',
        'ETag',
        'W/"71-0uwTpFFeCYb2/bgQQelVu4XuT3k"',
        'Date',
        'Fri, 21 Jun 2019 21:53:21 GMT',
        'Connection',
        'close' ],
     trailers: {},
     rawTrailers: [],
     aborted: false,
     upgrade: false,
     url: '',
     method: null,
     statusCode: 400,
     statusMessage: 'Bad Request',
     client:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 150,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 330,
        [Symbol(kBytesWritten)]: 224 },
     _consuming: false,
     _dumped: false,
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 70,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'PATCH /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Length: 70\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'PATCH',
        path: '/users/',
        _ended: true,
        res: [Circular],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     text:
      '{"message":"The \\"Content-Type\\" header must be set for POST, PATCH, and PUT requests with a non-empty payload."}' },
  request:
   Request {
     _events: [Object: null prototype] { abort: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     _enableHttp2: false,
     _agent: false,
     _formData: null,
     method: 'PATCH',
     url: 'http://localhost:8888/users/',
     _header: { 'user-agent': 'node-superagent/5.0.5' },
     header: { 'User-Agent': 'node-superagent/5.0.5' },
     writable: true,
     _redirects: 0,
     _maxRedirects: 5,
     cookies: '',
     qs: {},
     _query: [],
     qsRaw: [],
     _redirectList: [],
     _streamRequest: false,
     _data:
      '<?xml version="1.0" encoding="UTF-8" ?><email>justin@jsore.com</email>',
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 70,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'PATCH /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Length: 70\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'PATCH',
        path: '/users/',
        _ended: true,
        res: [IncomingMessage],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     protocol: 'http:',
     host: 'localhost:8888',
     _endCalled: true,
     _callback: [Function],
     _fullfilledPromise: Promise { <rejected> [Error] },
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 400,
        statusMessage: 'Bad Request',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [ClientRequest],
        text:
         '{"message":"The \\"Content-Type\\" header must be set for POST, PATCH, and PUT requests with a non-empty payload."}' },
     _resBuffered: true,
     response: [Circular],
     called: true },
  req:
   ClientRequest {
     _events:
      [Object: null prototype] {
        drain: [Function],
        error: [Function],
        prefinish: [Function: requestOnPrefinish] },
     _eventsCount: 3,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: true,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: false,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: 70,
     _hasBody: true,
     _trailer: '',
     finished: true,
     _headerSent: true,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 150,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 330,
        [Symbol(kBytesWritten)]: 224 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 150,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 330,
        [Symbol(kBytesWritten)]: 224 },
     _header:
      'PATCH /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Length: 70\r\nConnection: close\r\n\r\n',
     _onPendingData: [Function: noopPendingOutput],
     agent:
      Agent {
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object],
        requests: {},
        sockets: {},
        freeSockets: {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256 },
     socketPath: undefined,
     timeout: undefined,
     method: 'PATCH',
     path: '/users/',
     _ended: true,
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 400,
        statusMessage: 'Bad Request',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [Circular],
        text:
         '{"message":"The \\"Content-Type\\" header must be set for POST, PATCH, and PUT requests with a non-empty payload."}' },
     aborted: undefined,
     timeoutCb: null,
     upgradeOrConnect: false,
     parser: null,
     maxHeadersCount: null,
     [Symbol(isCorked)]: false,
     [Symbol(outHeadersKey)]:
      [Object: null prototype] {
        host: [Array],
        'accept-encoding': [Array],
        'user-agent': [Array],
        'content-length': [Array] } },
  text:
   '{"message":"The \\"Content-Type\\" header must be set for POST, PATCH, and PUT requests with a non-empty payload."}',
  body:
   { message:
      'The "Content-Type" header must be set for POST, PATCH, and PUT requests with a non-empty payload.' },
  files: undefined,
  buffered: true,
  headers:
   { 'x-powered-by': 'Express',
     'content-type': 'application/json; charset=utf-8',
     'content-length': '113',
     etag: 'W/"71-0uwTpFFeCYb2/bgQQelVu4XuT3k"',
     date: 'Fri, 21 Jun 2019 21:53:21 GMT',
     connection: 'close' },
  header:
   { 'x-powered-by': 'Express',
     'content-type': 'application/json; charset=utf-8',
     'content-length': '113',
     etag: 'W/"71-0uwTpFFeCYb2/bgQQelVu4XuT3k"',
     date: 'Fri, 21 Jun 2019 21:53:21 GMT',
     connection: 'close' },
  statusCode: 400,
  status: 400,
  statusType: 4,
  info: false,
  ok: false,
  redirect: false,
  clientError: true,
  serverError: false,
  error:
   { Error: cannot PATCH /users/ (400)
       at Response.toError (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:98:13)
       at ResponseBase._setStatusProperties (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/response-base.js:119:48)
       at new Response (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:44:8)
       at Request._emitResponse (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:909:18)
       at /Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:1105:42
       at IncomingMessage.<anonymous> (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/parsers/json.js:22:7)
       at IncomingMessage.emit (events.js:194:15)
       at endReadableNT (_stream_readable.js:1125:12)
       at process._tickCallback (internal/process/next_tick.js:63:19)
     status: 400,
     text:
      '{"message":"The \\"Content-Type\\" header must be set for POST, PATCH, and PUT requests with a non-empty payload."}',
     method: 'PATCH',
     path: '/users/' },
  created: false,
  accepted: false,
  noContent: false,
  badRequest: true,
  unauthorized: false,
  notAcceptable: false,
  forbidden: false,
  notFound: false,
  unprocessableEntity: false,
  type: 'application/json',
  charset: 'utf-8',
  links: {},
  setEncoding: [Function: bound ],
  redirects: [],
  pipe: [Function] }
400








...| superagent(method, http://host:portpath) ->PUT, http://localhost:8888/users/ || ES client.host -> http://localhost:9200 |
....Response {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  res:
   IncomingMessage {
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: true,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: true,
        decoder: [StringDecoder],
        encoding: 'utf8' },
     readable: false,
     _events:
      [Object: null prototype] {
        end: [Array],
        data: [Array],
        error: [Array],
        close: [Function: bound emit] },
     _eventsCount: 4,
     _maxListeners: undefined,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 199,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 330,
        [Symbol(kBytesWritten)]: 222 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 199,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 330,
        [Symbol(kBytesWritten)]: 222 },
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     httpVersion: '1.1',
     complete: true,
     headers:
      { 'x-powered-by': 'Express',
        'content-type': 'application/json; charset=utf-8',
        'content-length': '113',
        etag: 'W/"71-0uwTpFFeCYb2/bgQQelVu4XuT3k"',
        date: 'Fri, 21 Jun 2019 21:53:21 GMT',
        connection: 'close' },
     rawHeaders:
      [ 'X-Powered-By',
        'Express',
        'Content-Type',
        'application/json; charset=utf-8',
        'Content-Length',
        '113',
        'ETag',
        'W/"71-0uwTpFFeCYb2/bgQQelVu4XuT3k"',
        'Date',
        'Fri, 21 Jun 2019 21:53:21 GMT',
        'Connection',
        'close' ],
     trailers: {},
     rawTrailers: [],
     aborted: false,
     upgrade: false,
     url: '',
     method: null,
     statusCode: 400,
     statusMessage: 'Bad Request',
     client:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 199,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 330,
        [Symbol(kBytesWritten)]: 222 },
     _consuming: false,
     _dumped: false,
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 70,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'PUT /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Length: 70\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'PUT',
        path: '/users/',
        _ended: true,
        res: [Circular],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     text:
      '{"message":"The \\"Content-Type\\" header must be set for POST, PATCH, and PUT requests with a non-empty payload."}' },
  request:
   Request {
     _events: [Object: null prototype] { abort: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     _enableHttp2: false,
     _agent: false,
     _formData: null,
     method: 'PUT',
     url: 'http://localhost:8888/users/',
     _header: { 'user-agent': 'node-superagent/5.0.5' },
     header: { 'User-Agent': 'node-superagent/5.0.5' },
     writable: true,
     _redirects: 0,
     _maxRedirects: 5,
     cookies: '',
     qs: {},
     _query: [],
     qsRaw: [],
     _redirectList: [],
     _streamRequest: false,
     _data:
      '<?xml version="1.0" encoding="UTF-8" ?><email>justin@jsore.com</email>',
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 70,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'PUT /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Length: 70\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'PUT',
        path: '/users/',
        _ended: true,
        res: [IncomingMessage],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     protocol: 'http:',
     host: 'localhost:8888',
     _endCalled: true,
     _callback: [Function],
     _fullfilledPromise: Promise { <rejected> [Error] },
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 400,
        statusMessage: 'Bad Request',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [ClientRequest],
        text:
         '{"message":"The \\"Content-Type\\" header must be set for POST, PATCH, and PUT requests with a non-empty payload."}' },
     _resBuffered: true,
     response: [Circular],
     called: true },
  req:
   ClientRequest {
     _events:
      [Object: null prototype] {
        drain: [Function],
        error: [Function],
        prefinish: [Function: requestOnPrefinish] },
     _eventsCount: 3,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: true,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: false,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: 70,
     _hasBody: true,
     _trailer: '',
     finished: true,
     _headerSent: true,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 199,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 330,
        [Symbol(kBytesWritten)]: 222 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 199,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 330,
        [Symbol(kBytesWritten)]: 222 },
     _header:
      'PUT /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Length: 70\r\nConnection: close\r\n\r\n',
     _onPendingData: [Function: noopPendingOutput],
     agent:
      Agent {
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object],
        requests: {},
        sockets: {},
        freeSockets: {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256 },
     socketPath: undefined,
     timeout: undefined,
     method: 'PUT',
     path: '/users/',
     _ended: true,
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 400,
        statusMessage: 'Bad Request',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [Circular],
        text:
         '{"message":"The \\"Content-Type\\" header must be set for POST, PATCH, and PUT requests with a non-empty payload."}' },
     aborted: undefined,
     timeoutCb: null,
     upgradeOrConnect: false,
     parser: null,
     maxHeadersCount: null,
     [Symbol(isCorked)]: false,
     [Symbol(outHeadersKey)]:
      [Object: null prototype] {
        host: [Array],
        'accept-encoding': [Array],
        'user-agent': [Array],
        'content-length': [Array] } },
  text:
   '{"message":"The \\"Content-Type\\" header must be set for POST, PATCH, and PUT requests with a non-empty payload."}',
  body:
   { message:
      'The "Content-Type" header must be set for POST, PATCH, and PUT requests with a non-empty payload.' },
  files: undefined,
  buffered: true,
  headers:
   { 'x-powered-by': 'Express',
     'content-type': 'application/json; charset=utf-8',
     'content-length': '113',
     etag: 'W/"71-0uwTpFFeCYb2/bgQQelVu4XuT3k"',
     date: 'Fri, 21 Jun 2019 21:53:21 GMT',
     connection: 'close' },
  header:
   { 'x-powered-by': 'Express',
     'content-type': 'application/json; charset=utf-8',
     'content-length': '113',
     etag: 'W/"71-0uwTpFFeCYb2/bgQQelVu4XuT3k"',
     date: 'Fri, 21 Jun 2019 21:53:21 GMT',
     connection: 'close' },
  statusCode: 400,
  status: 400,
  statusType: 4,
  info: false,
  ok: false,
  redirect: false,
  clientError: true,
  serverError: false,
  error:
   { Error: cannot PUT /users/ (400)
       at Response.toError (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:98:13)
       at ResponseBase._setStatusProperties (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/response-base.js:119:48)
       at new Response (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:44:8)
       at Request._emitResponse (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:909:18)
       at /Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:1105:42
       at IncomingMessage.<anonymous> (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/parsers/json.js:22:7)
       at IncomingMessage.emit (events.js:194:15)
       at endReadableNT (_stream_readable.js:1125:12)
       at process._tickCallback (internal/process/next_tick.js:63:19)
     status: 400,
     text:
      '{"message":"The \\"Content-Type\\" header must be set for POST, PATCH, and PUT requests with a non-empty payload."}',
     method: 'PUT',
     path: '/users/' },
  created: false,
  accepted: false,
  noContent: false,
  badRequest: true,
  unauthorized: false,
  notAcceptable: false,
  forbidden: false,
  notFound: false,
  unprocessableEntity: false,
  type: 'application/json',
  charset: 'utf-8',
  links: {},
  setEncoding: [Function: bound ],
  redirects: [],
  pipe: [Function] }
400








...| superagent(method, http://host:portpath) ->POST, http://localhost:8888/users/ || ES client.host -> http://localhost:9200 |
...Response {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  res:
   IncomingMessage {
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: true,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: true,
        decoder: [StringDecoder],
        encoding: 'utf8' },
     readable: false,
     _events:
      [Object: null prototype] {
        end: [Array],
        data: [Array],
        error: [Array],
        close: [Function: bound emit] },
     _eventsCount: 4,
     _maxListeners: undefined,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 245,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 257,
        [Symbol(kBytesWritten)]: 152 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 245,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 257,
        [Symbol(kBytesWritten)]: 152 },
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     httpVersion: '1.1',
     complete: true,
     headers:
      { 'x-powered-by': 'Express',
        'content-type': 'application/json; charset=utf-8',
        'content-length': '41',
        etag: 'W/"29-HKHrTZDQ6U5s+YdTHanX0KQqpCU"',
        date: 'Fri, 21 Jun 2019 21:53:21 GMT',
        connection: 'close' },
     rawHeaders:
      [ 'X-Powered-By',
        'Express',
        'Content-Type',
        'application/json; charset=utf-8',
        'Content-Length',
        '41',
        'ETag',
        'W/"29-HKHrTZDQ6U5s+YdTHanX0KQqpCU"',
        'Date',
        'Fri, 21 Jun 2019 21:53:21 GMT',
        'Connection',
        'close' ],
     trailers: {},
     rawTrailers: [],
     aborted: false,
     upgrade: false,
     url: '',
     method: null,
     statusCode: 400,
     statusMessage: 'Bad Request',
     client:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 245,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 257,
        [Symbol(kBytesWritten)]: 152 },
     _consuming: false,
     _dumped: false,
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 0,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nConnection: close\r\nContent-Length: 0\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [Circular],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     text: '{"message":"Payload should not be empty"}' },
  request:
   Request {
     _events: [Object: null prototype] { abort: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     _enableHttp2: false,
     _agent: false,
     _formData: null,
     method: 'POST',
     url: 'http://localhost:8888/users/',
     _header: { 'user-agent': 'node-superagent/5.0.5' },
     header: { 'User-Agent': 'node-superagent/5.0.5' },
     writable: true,
     _redirects: 0,
     _maxRedirects: 5,
     cookies: '',
     qs: {},
     _query: [],
     qsRaw: [],
     _redirectList: [],
     _streamRequest: false,
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 0,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nConnection: close\r\nContent-Length: 0\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [IncomingMessage],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     protocol: 'http:',
     host: 'localhost:8888',
     _endCalled: true,
     _callback: [Function],
     _fullfilledPromise: Promise { <rejected> [Error] },
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 400,
        statusMessage: 'Bad Request',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [ClientRequest],
        text: '{"message":"Payload should not be empty"}' },
     _resBuffered: true,
     response: [Circular],
     called: true },
  req:
   ClientRequest {
     _events:
      [Object: null prototype] {
        drain: [Function],
        error: [Function],
        prefinish: [Function: requestOnPrefinish] },
     _eventsCount: 3,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: true,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: false,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: 0,
     _hasBody: true,
     _trailer: '',
     finished: true,
     _headerSent: true,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 245,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 257,
        [Symbol(kBytesWritten)]: 152 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 245,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 257,
        [Symbol(kBytesWritten)]: 152 },
     _header:
      'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nConnection: close\r\nContent-Length: 0\r\n\r\n',
     _onPendingData: [Function: noopPendingOutput],
     agent:
      Agent {
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object],
        requests: {},
        sockets: {},
        freeSockets: {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256 },
     socketPath: undefined,
     timeout: undefined,
     method: 'POST',
     path: '/users/',
     _ended: true,
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 400,
        statusMessage: 'Bad Request',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [Circular],
        text: '{"message":"Payload should not be empty"}' },
     aborted: undefined,
     timeoutCb: null,
     upgradeOrConnect: false,
     parser: null,
     maxHeadersCount: null,
     [Symbol(isCorked)]: false,
     [Symbol(outHeadersKey)]:
      [Object: null prototype] {
        host: [Array],
        'accept-encoding': [Array],
        'user-agent': [Array] } },
  text: '{"message":"Payload should not be empty"}',
  body: { message: 'Payload should not be empty' },
  files: undefined,
  buffered: true,
  headers:
   { 'x-powered-by': 'Express',
     'content-type': 'application/json; charset=utf-8',
     'content-length': '41',
     etag: 'W/"29-HKHrTZDQ6U5s+YdTHanX0KQqpCU"',
     date: 'Fri, 21 Jun 2019 21:53:21 GMT',
     connection: 'close' },
  header:
   { 'x-powered-by': 'Express',
     'content-type': 'application/json; charset=utf-8',
     'content-length': '41',
     etag: 'W/"29-HKHrTZDQ6U5s+YdTHanX0KQqpCU"',
     date: 'Fri, 21 Jun 2019 21:53:21 GMT',
     connection: 'close' },
  statusCode: 400,
  status: 400,
  statusType: 4,
  info: false,
  ok: false,
  redirect: false,
  clientError: true,
  serverError: false,
  error:
   { Error: cannot POST /users/ (400)
       at Response.toError (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:98:13)
       at ResponseBase._setStatusProperties (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/response-base.js:119:48)
       at new Response (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:44:8)
       at Request._emitResponse (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:909:18)
       at /Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:1105:42
       at IncomingMessage.<anonymous> (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/parsers/json.js:22:7)
       at IncomingMessage.emit (events.js:194:15)
       at endReadableNT (_stream_readable.js:1125:12)
       at process._tickCallback (internal/process/next_tick.js:63:19)
     status: 400,
     text: '{"message":"Payload should not be empty"}',
     method: 'POST',
     path: '/users/' },
  created: false,
  accepted: false,
  noContent: false,
  badRequest: true,
  unauthorized: false,
  notAcceptable: false,
  forbidden: false,
  notFound: false,
  unprocessableEntity: false,
  type: 'application/json',
  charset: 'utf-8',
  links: {},
  setEncoding: [Function: bound ],
  redirects: [],
  pipe: [Function] }
400








...| superagent(method, http://host:portpath) ->POST, http://localhost:8888/users/ || ES client.host -> http://localhost:9200 |
...Response {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  res:
   IncomingMessage {
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: true,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: true,
        decoder: [StringDecoder],
        encoding: 'utf8' },
     readable: false,
     _events:
      [Object: null prototype] {
        end: [Array],
        data: [Array],
        error: [Array],
        close: [Function: bound emit] },
     _eventsCount: 4,
     _maxListeners: undefined,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 291,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 304,
        [Symbol(kBytesWritten)]: 247 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 291,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 304,
        [Symbol(kBytesWritten)]: 247 },
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     httpVersion: '1.1',
     complete: true,
     headers:
      { 'x-powered-by': 'Express',
        'content-type': 'application/json; charset=utf-8',
        'content-length': '77',
        etag: 'W/"4d-uXP1ecy00Rer89dVz5/l1K8kaMk"',
        date: 'Fri, 21 Jun 2019 21:53:21 GMT',
        connection: 'close' },
     rawHeaders:
      [ 'X-Powered-By',
        'Express',
        'Content-Type',
        'application/json; charset=utf-8',
        'Content-Length',
        '77',
        'ETag',
        'W/"4d-uXP1ecy00Rer89dVz5/l1K8kaMk"',
        'Date',
        'Fri, 21 Jun 2019 21:53:21 GMT',
        'Connection',
        'close' ],
     trailers: {},
     rawTrailers: [],
     aborted: false,
     upgrade: false,
     url: '',
     method: null,
     statusCode: 415,
     statusMessage: 'Unsupported Media Type',
     client:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 291,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 304,
        [Symbol(kBytesWritten)]: 247 },
     _consuming: false,
     _dumped: false,
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 70,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: text/xml\r\nContent-Length: 70\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [Circular],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     text:
      '{"message":"The \\"Content-Type\\" header must always be \\"application/json\\""}' },
  request:
   Request {
     _events: [Object: null prototype] { abort: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     _enableHttp2: false,
     _agent: false,
     _formData: null,
     method: 'POST',
     url: 'http://localhost:8888/users/',
     _header:
      { 'user-agent': 'node-superagent/5.0.5',
        'content-type': 'text/xml' },
     header:
      { 'User-Agent': 'node-superagent/5.0.5',
        'Content-Type': 'text/xml' },
     writable: true,
     _redirects: 0,
     _maxRedirects: 5,
     cookies: '',
     qs: {},
     _query: [],
     qsRaw: [],
     _redirectList: [],
     _streamRequest: false,
     _data:
      '<?xml version="1.0" encoding="UTF-8" ?><email>justin@jsore.com</email>',
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 70,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: text/xml\r\nContent-Length: 70\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [IncomingMessage],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     protocol: 'http:',
     host: 'localhost:8888',
     _endCalled: true,
     _callback: [Function],
     _fullfilledPromise: Promise { <rejected> [Error] },
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 415,
        statusMessage: 'Unsupported Media Type',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [ClientRequest],
        text:
         '{"message":"The \\"Content-Type\\" header must always be \\"application/json\\""}' },
     _resBuffered: true,
     response: [Circular],
     called: true },
  req:
   ClientRequest {
     _events:
      [Object: null prototype] {
        drain: [Function],
        error: [Function],
        prefinish: [Function: requestOnPrefinish] },
     _eventsCount: 3,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: true,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: false,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: 70,
     _hasBody: true,
     _trailer: '',
     finished: true,
     _headerSent: true,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 291,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 304,
        [Symbol(kBytesWritten)]: 247 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 291,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 304,
        [Symbol(kBytesWritten)]: 247 },
     _header:
      'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: text/xml\r\nContent-Length: 70\r\nConnection: close\r\n\r\n',
     _onPendingData: [Function: noopPendingOutput],
     agent:
      Agent {
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object],
        requests: {},
        sockets: {},
        freeSockets: {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256 },
     socketPath: undefined,
     timeout: undefined,
     method: 'POST',
     path: '/users/',
     _ended: true,
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 415,
        statusMessage: 'Unsupported Media Type',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [Circular],
        text:
         '{"message":"The \\"Content-Type\\" header must always be \\"application/json\\""}' },
     aborted: undefined,
     timeoutCb: null,
     upgradeOrConnect: false,
     parser: null,
     maxHeadersCount: null,
     [Symbol(isCorked)]: false,
     [Symbol(outHeadersKey)]:
      [Object: null prototype] {
        host: [Array],
        'accept-encoding': [Array],
        'user-agent': [Array],
        'content-type': [Array],
        'content-length': [Array] } },
  text:
   '{"message":"The \\"Content-Type\\" header must always be \\"application/json\\""}',
  body:
   { message:
      'The "Content-Type" header must always be "application/json"' },
  files: undefined,
  buffered: true,
  headers:
   { 'x-powered-by': 'Express',
     'content-type': 'application/json; charset=utf-8',
     'content-length': '77',
     etag: 'W/"4d-uXP1ecy00Rer89dVz5/l1K8kaMk"',
     date: 'Fri, 21 Jun 2019 21:53:21 GMT',
     connection: 'close' },
  header:
   { 'x-powered-by': 'Express',
     'content-type': 'application/json; charset=utf-8',
     'content-length': '77',
     etag: 'W/"4d-uXP1ecy00Rer89dVz5/l1K8kaMk"',
     date: 'Fri, 21 Jun 2019 21:53:21 GMT',
     connection: 'close' },
  statusCode: 415,
  status: 415,
  statusType: 4,
  info: false,
  ok: false,
  redirect: false,
  clientError: true,
  serverError: false,
  error:
   { Error: cannot POST /users/ (415)
       at Response.toError (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:98:13)
       at ResponseBase._setStatusProperties (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/response-base.js:119:48)
       at new Response (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:44:8)
       at Request._emitResponse (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:909:18)
       at /Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:1105:42
       at IncomingMessage.<anonymous> (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/parsers/json.js:22:7)
       at IncomingMessage.emit (events.js:194:15)
       at endReadableNT (_stream_readable.js:1125:12)
       at process._tickCallback (internal/process/next_tick.js:63:19)
     status: 415,
     text:
      '{"message":"The \\"Content-Type\\" header must always be \\"application/json\\""}',
     method: 'POST',
     path: '/users/' },
  created: false,
  accepted: false,
  noContent: false,
  badRequest: false,
  unauthorized: false,
  notAcceptable: false,
  forbidden: false,
  notFound: false,
  unprocessableEntity: false,
  type: 'application/json',
  charset: 'utf-8',
  links: {},
  setEncoding: [Function: bound ],
  redirects: [],
  pipe: [Function] }
415








...| superagent(method, http://host:portpath) ->POST, http://localhost:8888/users/ || ES client.host -> http://localhost:9200 |
...Response {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  res:
   IncomingMessage {
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: true,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: true,
        decoder: [StringDecoder],
        encoding: 'utf8' },
     readable: false,
     _events:
      [Object: null prototype] {
        end: [Array],
        data: [Array],
        error: [Array],
        close: [Function: bound emit] },
     _eventsCount: 4,
     _maxListeners: undefined,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 337,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 262,
        [Symbol(kBytesWritten)]: 222 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 337,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 262,
        [Symbol(kBytesWritten)]: 222 },
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     httpVersion: '1.1',
     complete: true,
     headers:
      { 'x-powered-by': 'Express',
        'content-type': 'application/json; charset=utf-8',
        'content-length': '46',
        etag: 'W/"2e-50OpfQuhSgrDpdbgtmzAXHrZtqk"',
        date: 'Fri, 21 Jun 2019 21:53:21 GMT',
        connection: 'close' },
     rawHeaders:
      [ 'X-Powered-By',
        'Express',
        'Content-Type',
        'application/json; charset=utf-8',
        'Content-Length',
        '46',
        'ETag',
        'W/"2e-50OpfQuhSgrDpdbgtmzAXHrZtqk"',
        'Date',
        'Fri, 21 Jun 2019 21:53:21 GMT',
        'Connection',
        'close' ],
     trailers: {},
     rawTrailers: [],
     aborted: false,
     upgrade: false,
     url: '',
     method: null,
     statusCode: 400,
     statusMessage: 'Bad Request',
     client:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [ClientRequest],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 337,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 262,
        [Symbol(kBytesWritten)]: 222 },
     _consuming: false,
     _dumped: false,
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 37,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 37\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [Circular],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     text: '{"message":"Payload should be in JSON format"}' },
  request:
   Request {
     _events: [Object: null prototype] { abort: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     _enableHttp2: false,
     _agent: false,
     _formData: null,
     method: 'POST',
     url: 'http://localhost:8888/users/',
     _header:
      { 'user-agent': 'node-superagent/5.0.5',
        'content-type': 'application/json' },
     header:
      { 'User-Agent': 'node-superagent/5.0.5',
        'Content-Type': 'application/json' },
     writable: true,
     _redirects: 0,
     _maxRedirects: 5,
     cookies: '',
     qs: {},
     _query: [],
     qsRaw: [],
     _redirectList: [],
     _streamRequest: false,
     _data: '{"email": "justin@jsore.com", name: }',
     req:
      ClientRequest {
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: 37,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: [Socket],
        connection: [Socket],
        _header:
         'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 37\r\nConnection: close\r\n\r\n',
        _onPendingData: [Function: noopPendingOutput],
        agent: [Agent],
        socketPath: undefined,
        timeout: undefined,
        method: 'POST',
        path: '/users/',
        _ended: true,
        res: [IncomingMessage],
        aborted: undefined,
        timeoutCb: null,
        upgradeOrConnect: false,
        parser: null,
        maxHeadersCount: null,
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     protocol: 'http:',
     host: 'localhost:8888',
     _endCalled: true,
     _callback: [Function],
     _fullfilledPromise: Promise { <rejected> [Error] },
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 400,
        statusMessage: 'Bad Request',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [ClientRequest],
        text: '{"message":"Payload should be in JSON format"}' },
     _resBuffered: true,
     response: [Circular],
     called: true },
  req:
   ClientRequest {
     _events:
      [Object: null prototype] {
        drain: [Function],
        error: [Function],
        prefinish: [Function: requestOnPrefinish] },
     _eventsCount: 3,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: true,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: true,
     sendDate: false,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: 37,
     _hasBody: true,
     _trailer: '',
     finished: true,
     _headerSent: true,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 337,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 262,
        [Symbol(kBytesWritten)]: 222 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 6,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: false,
        allowHalfOpen: false,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        parser: null,
        _httpMessage: [Circular],
        write: [Function: writeAfterFIN],
        [Symbol(asyncId)]: 337,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBytesRead)]: 262,
        [Symbol(kBytesWritten)]: 222 },
     _header:
      'POST /users/ HTTP/1.1\r\nHost: localhost:8888\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/5.0.5\r\nContent-Type: application/json\r\nContent-Length: 37\r\nConnection: close\r\n\r\n',
     _onPendingData: [Function: noopPendingOutput],
     agent:
      Agent {
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object],
        requests: {},
        sockets: {},
        freeSockets: {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256 },
     socketPath: undefined,
     timeout: undefined,
     method: 'POST',
     path: '/users/',
     _ended: true,
     res:
      IncomingMessage {
        _readableState: [ReadableState],
        readable: false,
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Socket],
        connection: [Socket],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        aborted: false,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 400,
        statusMessage: 'Bad Request',
        client: [Socket],
        _consuming: false,
        _dumped: false,
        req: [Circular],
        text: '{"message":"Payload should be in JSON format"}' },
     aborted: undefined,
     timeoutCb: null,
     upgradeOrConnect: false,
     parser: null,
     maxHeadersCount: null,
     [Symbol(isCorked)]: false,
     [Symbol(outHeadersKey)]:
      [Object: null prototype] {
        host: [Array],
        'accept-encoding': [Array],
        'user-agent': [Array],
        'content-type': [Array],
        'content-length': [Array] } },
  text: '{"message":"Payload should be in JSON format"}',
  body: { message: 'Payload should be in JSON format' },
  files: undefined,
  buffered: true,
  headers:
   { 'x-powered-by': 'Express',
     'content-type': 'application/json; charset=utf-8',
     'content-length': '46',
     etag: 'W/"2e-50OpfQuhSgrDpdbgtmzAXHrZtqk"',
     date: 'Fri, 21 Jun 2019 21:53:21 GMT',
     connection: 'close' },
  header:
   { 'x-powered-by': 'Express',
     'content-type': 'application/json; charset=utf-8',
     'content-length': '46',
     etag: 'W/"2e-50OpfQuhSgrDpdbgtmzAXHrZtqk"',
     date: 'Fri, 21 Jun 2019 21:53:21 GMT',
     connection: 'close' },
  statusCode: 400,
  status: 400,
  statusType: 4,
  info: false,
  ok: false,
  redirect: false,
  clientError: true,
  serverError: false,
  error:
   { Error: cannot POST /users/ (400)
       at Response.toError (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:98:13)
       at ResponseBase._setStatusProperties (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/response-base.js:119:48)
       at new Response (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/response.js:44:8)
       at Request._emitResponse (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:909:18)
       at /Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/index.js:1105:42
       at IncomingMessage.<anonymous> (/Users/justin/Core/Dev/Pub/hobnob/node_modules/superagent/lib/node/parsers/json.js:22:7)
       at IncomingMessage.emit (events.js:194:15)
       at endReadableNT (_stream_readable.js:1125:12)
       at process._tickCallback (internal/process/next_tick.js:63:19)
     status: 400,
     text: '{"message":"Payload should be in JSON format"}',
     method: 'POST',
     path: '/users/' },
  created: false,
  accepted: false,
  noContent: false,
  badRequest: true,
  unauthorized: false,
  notAcceptable: false,
  forbidden: false,
  notFound: false,
  unprocessableEntity: false,
  type: 'application/json',
  charset: 'utf-8',
  links: {},
  setEncoding: [Function: bound ],
  redirects: [],
  pipe: [Function] }
400
